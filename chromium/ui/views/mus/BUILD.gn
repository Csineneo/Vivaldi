# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/features.gni")
import("//build/config/ui.gni")
import("//mojo/public/mojo_application.gni")
import("//mojo/public/mojo_application_manifest.gni")
import("//testing/test.gni")
import("//tools/grit/repack.gni")

component("mus") {
  output_name = "ui_views_mus_lib"

  sources = [
    "aura_init.cc",
    "aura_init.h",
    "display_converter.cc",
    "display_converter.h",
    "display_list.cc",
    "display_list.h",
    "input_method_mus.cc",
    "input_method_mus.h",
    "mus_export.h",
    "native_widget_mus.cc",
    "native_widget_mus.h",
    "platform_window_mus.cc",
    "platform_window_mus.h",
    "screen_mus.cc",
    "screen_mus.h",
    "screen_mus_delegate.h",
    "surface_binding.cc",
    "surface_binding.h",
    "surface_context_factory.cc",
    "surface_context_factory.h",
    "window_manager_connection.cc",
    "window_manager_connection.h",
    "window_manager_constants_converters.cc",
    "window_manager_constants_converters.h",
    "window_manager_frame_values.cc",
    "window_manager_frame_values.h",
    "window_tree_host_mus.cc",
    "window_tree_host_mus.h",
  ]

  defines = [ "VIEWS_MUS_IMPLEMENTATION" ]

  public_deps = [
    ":resources",
    "//components/mus/public/cpp",
    "//ui/aura",
  ]
  deps = [
    "//base",
    "//base:i18n",
    "//base/third_party/dynamic_annotations",
    "//cc",
    "//cc/surfaces",
    "//components/bitmap_uploader",
    "//components/mus/gles2:lib",
    "//components/mus/public/cpp",
    "//components/mus/public/interfaces",
    "//mojo/converters/geometry",
    "//mojo/converters/ime",
    "//mojo/converters/input_events",
    "//mojo/converters/surfaces",
    "//mojo/platform_handle:for_component",
    "//mojo/public/c/system:for_component",
    "//mojo/public/cpp/bindings",
    "//services/catalog/public/cpp",
    "//services/shell/public/cpp",
    "//services/shell/public/interfaces",
    "//skia",
    "//third_party/icu",
    "//ui/aura",
    "//ui/compositor",
    "//ui/display",
    "//ui/events",
    "//ui/events:events_base",
    "//ui/events/devices",
    "//ui/gfx",
    "//ui/gfx/geometry",
    "//ui/gl",
    "//ui/mojo/display",
    "//ui/mojo/ime:interfaces_cpp_sources",
    "//ui/native_theme",
    "//ui/platform_window",
    "//ui/views",
    "//ui/wm",
  ]

  if (is_linux && !is_android) {
    deps += [ "//components/font_service/public/cpp" ]
    data_deps = [
      "//components/font_service",
    ]
  }
}

repack("resources") {
  sources = [
    "$root_gen_dir/ui/resources/ui_resources_100_percent.pak",
    "$root_gen_dir/ui/strings/app_locale_settings_en-US.pak",
    "$root_gen_dir/ui/strings/ui_strings_en-US.pak",
    "$root_gen_dir/ui/views/resources/views_resources_100_percent.pak",
  ]
  output = "$root_out_dir/views_mus_resources.pak"
  deps = [
    "//ui/resources",
    "//ui/strings",
    "//ui/views/resources",
  ]
}

group("for_mojo_application") {
  public_deps = [
    ":mus",
  ]
}

group("for_shared_library") {
  public_deps = [
    ":mus",
  ]
  if (!is_component_build) {
    deps = [
      "//mojo/gles2",
    ]
  }
}

source_set("test_support") {
  testonly = true

  sources = [
    "../test/native_widget_factory_mus.cc",
    "../views_test_suite.cc",
    "../views_test_suite.h",
    "views_mus_test_suite.cc",
    "views_mus_test_suite.h",
  ]

  deps = [
    ":mus",
    "//base",
    "//base/test:test_support",
    "//components/mus/common:mus_common",
    "//services/shell/background:lib",
    "//services/shell/background/tests:test_support",
    "//services/shell/public/cpp:sources",
    "//testing/gtest",
    "//ui/aura",
    "//ui/gl:test_support",
    "//ui/resources",
    "//ui/resources:ui_test_pak",
    "//ui/views",
    "//ui/views:test_support_internal",
  ]

  data_deps = [
    "//ui/resources:ui_test_pak_data",
  ]
}

test("views_mus_unittests") {
  testonly = true

  configs += [ "//build/config:precompiled_headers" ]

  # TODO(sky): add more files.
  sources = [
    "../view_targeter_unittest.cc",
    "../widget/native_widget_unittest.cc",
    "../widget/widget_unittest.cc",
    "display_list_unittest.cc",
    "native_widget_mus_unittest.cc",
    "run_all_unittests_mus.cc",
    "screen_mus_unittest.cc",
    "window_manager_connection_unittest.cc",
  ]

  deps = [
    ":mus",
    ":test_support",
    "//base",
    "//base:i18n",
    "//cc",
    "//components/mus/public/cpp",
    "//components/mus/public/cpp/tests:unittest_support",
    "//components/mus/public/interfaces",
    "//services/shell/background:main",  # Provides main().
    "//skia",
    "//testing/gtest",
    "//third_party/icu",
    "//ui/accessibility",
    "//ui/aura",
    "//ui/aura:test_support",
    "//ui/base",
    "//ui/base:test_support",
    "//ui/base/ime",
    "//ui/compositor:test_support",
    "//ui/events:dom_keycode_converter",
    "//ui/events:events_base",
    "//ui/events:test_support",
    "//ui/events/platform",
    "//ui/gfx:test_support",
    "//ui/gfx/geometry",
    "//ui/strings",
    "//ui/views",
    "//ui/views:test_support_internal",
    "//ui/wm",
    "//url",
  ]

  data_deps = [
    ":unittests_manifest",
    "//mash/wm",
  ]

  if (is_win) {
    deps += [
      "//build/win:default_exe_manifest",
      "//third_party/iaccessible2",
      "//third_party/wtl",
    ]
    libs = [
      "imm32.lib",
      "oleacc.lib",
      "comctl32.lib",
    ]
  }

  if (use_x11) {
    configs += [
      "//build/config/linux:x11",
      "//build/config/linux:xext",
    ]
    deps += [
      "//ui/events/devices",
      "//ui/events/platform/x11",
      "//ui/gfx/x",
    ]
  }
}

# Tests that must run sequentially because they access system-wide features
# like capture.
test("views_mus_interactive_ui_tests") {
  testonly = true

  configs += [ "//build/config:precompiled_headers" ]

  sources = [
    "../widget/widget_interactive_uitest.cc",
    "interactive_ui_tests_mus.cc",
  ]

  deps = [
    ":mus",
    ":test_support",
    "//base",
    "//services/shell/background:main",  # Provides main().
    "//ui/aura",
    "//ui/base",
    "//ui/base/ime",
    "//ui/events:events_base",
    "//ui/events:test_support",
    "//ui/gl:test_support",
    "//ui/touch_selection",
    "//ui/views",
    "//ui/views:test_support_internal",
    "//ui/wm",
  ]

  data_deps = [
    ":interactive_ui_tests_manifest",
    "//mash/wm",
  ]

  if (is_win) {
    deps += [
      "//build/win:default_exe_manifest",
      "//third_party/iaccessible2",
      "//third_party/wtl",
    ]
    libs = [
      "imm32.lib",
      "oleacc.lib",
      "comctl32.lib",
    ]
  }
}

mojo_application_manifest("unittests_manifest") {
  type = "exe"
  application_name = "views_mus_unittests"
  source = "unittests_manifest.json"
}

mojo_application_manifest("interactive_ui_tests_manifest") {
  type = "exe"
  application_name = "views_mus_interactive_ui_tests"
  source = "interactive_ui_tests_manifest.json"
}

group("for_component") {
  public_deps = [
    ":mus",
  ]
  deps = [
    "//mojo/gles2",
  ]
}
