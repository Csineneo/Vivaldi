# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/android/config.gni")
import("//build/config/sanitizers/sanitizers.gni")
import("//testing/libfuzzer/fuzzer_test.gni")

# Config for us and everybody else depending on BoringSSL.
config("external_config") {
  include_dirs = [ "src/include" ]
  if (is_component_build) {
    defines = [ "BORINGSSL_SHARED_LIBRARY" ]
  }
}

# Config internal to this build file, shared by boringssl and boringssl_fuzzer.
config("internal_config") {
  visibility = [ ":*" ]  # Only targets in this file can depend on this.
  defines = [
    "BORINGSSL_IMPLEMENTATION",
    "BORINGSSL_NO_STATIC_INITIALIZER",
    "OPENSSL_SMALL",
  ]
  configs = [
    # TODO(davidben): Fix size_t truncations in BoringSSL.
    # https://crbug.com/429039
    "//build/config/compiler:no_size_t_to_int_warning",
  ]
}

config("no_asm_config") {
  visibility = [ ":*" ]  # Only targets in this file can depend on this.
  defines = [ "OPENSSL_NO_ASM" ]
}

config("fuzzer_config") {
  visibility = [ ":*" ]  # Only targets in this file can depend on this.
  defines = [ "BORINGSSL_UNSAFE_FUZZER_MODE" ]
}

# The list of BoringSSL files is kept in boringssl.gypi.
gypi_values =
    exec_script("//build/gypi_to_gn.py",
                [ rebase_path("//third_party/boringssl/boringssl.gypi") ],
                "scope",
                [ "//third_party/boringssl/boringssl.gypi" ])
boringssl_sources =
    gypi_values.boringssl_crypto_sources + gypi_values.boringssl_ssl_sources

# Windows' assembly is built with Yasm. The other platforms use the platform
# assembler.
if (is_win && !is_msan) {
  import("//third_party/yasm/yasm_assemble.gni")
  yasm_assemble("boringssl_asm") {
    if (current_cpu == "x64") {
      sources = gypi_values.boringssl_win_x86_64_sources
    } else if (current_cpu == "x86") {
      sources = gypi_values.boringssl_win_x86_sources
    }
  }
} else {
  source_set("boringssl_asm") {
    visibility = [ ":*" ]  # Only targets in this file can depend on this.

    defines = []
    sources = []
    asmflags = []
    include_dirs = [ "src/include" ]

    if (current_cpu == "arm" && is_clang) {
      # TODO(hans) Enable integrated-as (crbug.com/124610).
      asmflags += [ "-fno-integrated-as" ]
      if (is_android) {
        rebased_android_toolchain_root =
            rebase_path(android_toolchain_root, root_build_dir)

        # Else /usr/bin/as gets picked up.
        asmflags += [ "-B${rebased_android_toolchain_root}/bin" ]
      }
    }

    if (is_msan) {
      public_configs = [ ":no_asm_config" ]
    } else if (current_cpu == "x64") {
      if (is_ios) {
        defines += [ "OPENSSL_NO_ASM" ]
      } else if (is_mac) {
        sources += gypi_values.boringssl_mac_x86_64_sources
      } else if (is_linux || is_android) {
        sources += gypi_values.boringssl_linux_x86_64_sources
      } else {
        public_configs = [ ":no_asm_config" ]
      }
    } else if (current_cpu == "x86") {
      if (is_ios) {
        defines += [ "OPENSSL_NO_ASM" ]
      } else if (is_mac) {
        sources += gypi_values.boringssl_mac_x86_sources
      } else if (is_linux || is_android) {
        sources += gypi_values.boringssl_linux_x86_sources
      } else {
        public_configs = [ ":no_asm_config" ]
      }
    } else if (current_cpu == "arm" && (is_linux || is_android)) {
      sources += gypi_values.boringssl_linux_arm_sources
    } else if (current_cpu == "arm64" && (is_linux || is_android)) {
      sources += gypi_values.boringssl_linux_aarch64_sources

      # TODO(davidben): Remove explicit arch flag once https://crbug.com/576858
      # is fixed.
      asmflags += [ "-march=armv8-a+crypto" ]
    } else {
      public_configs = [ ":no_asm_config" ]
    }
  }
}

component("boringssl") {
  sources = boringssl_sources
  deps = [
    ":boringssl_asm",
  ]

  public_configs = [ ":external_config" ]
  configs += [ ":internal_config" ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]

  if (is_nacl) {
    deps += [ "//native_client_sdk/src/libraries/nacl_io" ]
  }
}

# The same as boringssl, but builds with BORINGSSL_UNSAFE_FUZZER_MODE.
component("boringssl_fuzzer") {
  visibility = [ ":*" ]  # Only targets in this file can depend on this.

  sources = boringssl_sources
  deps = [
    ":boringssl_asm",
  ]

  public_configs = [
    ":external_config",
    ":fuzzer_config",
  ]
  configs += [ ":internal_config" ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]

  if (is_nacl) {
    deps += [ "//native_client_sdk/src/libraries/nacl_io" ]
  }
}

fuzzer_test("boringssl_cert_fuzzer") {
  sources = [
    "src/fuzz/cert.cc",
  ]
  deps = [
    ":boringssl_fuzzer",
  ]
  seed_corpus = "src/fuzz/cert_corpus"
}

fuzzer_test("boringssl_client_fuzzer") {
  sources = [
    "src/fuzz/client.cc",
  ]
  deps = [
    ":boringssl_fuzzer",
  ]
  seed_corpus = "src/fuzz/client_corpus"
}

fuzzer_test("boringssl_privkey_fuzzer") {
  sources = [
    "src/fuzz/privkey.cc",
  ]
  deps = [
    ":boringssl_fuzzer",
  ]
  seed_corpus = "src/fuzz/privkey_corpus"
}

fuzzer_test("boringssl_server_fuzzer") {
  sources = [
    "src/fuzz/server.cc",
  ]
  deps = [
    ":boringssl_fuzzer",
  ]
  seed_corpus = "src/fuzz/server_corpus"
}
