// This file is generated

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef {{class_name}}_h
#define {{class_name}}_h

#include "platform/inspector_protocol/Backend.h"
#include "platform/inspector_protocol/TypeBuilder.h"

namespace blink {
namespace protocol {

class FrontendChannel;
class DispatcherImplWeakPtr;

class PLATFORM_EXPORT Dispatcher {
public:
    static PassOwnPtr<Dispatcher> create(FrontendChannel* frontendChannel);
    virtual ~Dispatcher() { }

    class PLATFORM_EXPORT CallbackBase {
    public:
        CallbackBase(PassOwnPtr<DispatcherImplWeakPtr> backendImpl, int sessionId, int id);
        virtual ~CallbackBase();
        void sendFailure(const ErrorString&);
        void dispose();

    protected:
        void sendIfActive(PassOwnPtr<protocol::DictionaryValue> partialMessage, const ErrorString& invocationError);

    private:
        OwnPtr<DispatcherImplWeakPtr> m_backendImpl;
        int m_sessionId;
        int m_id;
    };

{% for domain in api.domains %}
    virtual void registerAgent(blink::protocol::Backend::{{domain.domain}}*) = 0;
{% endfor %}

    virtual void clearFrontend() = 0;

    enum CommonErrorCode {
        ParseError = 0,
        InvalidRequest,
        MethodNotFound,
        InvalidParams,
        InternalError,
        ServerError,
        LastEntry,
    };

    void reportProtocolError(int sessionId, int callId, CommonErrorCode, const String16& errorMessage) const;
    virtual void reportProtocolError(int sessionId, int callId, CommonErrorCode, const String16& errorMessage, ErrorSupport*) const = 0;
    virtual void dispatch(int sessionId, const String16& message) = 0;
    static bool getCommandName(const String16& message, String16* result);
};

} // namespace protocol
} // namespace blink

#endif // !defined({{class_name}}_h)
