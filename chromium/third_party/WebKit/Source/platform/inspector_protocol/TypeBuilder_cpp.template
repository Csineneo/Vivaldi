// This file is generated

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "platform/inspector_protocol/{{class_name}}.h"

namespace blink {
namespace protocol {

ErrorSupport::ErrorSupport() : m_errorString(nullptr) { }
ErrorSupport::ErrorSupport(String* errorString) : m_errorString(errorString) { }
ErrorSupport::~ErrorSupport()
{
    if (m_errorString && hasErrors())
        *m_errorString = "Internal error(s): " + errors();
}

void ErrorSupport::setName(const String& name)
{
    ASSERT(m_path.size());
    m_path[m_path.size() - 1] = name;
}

void ErrorSupport::push()
{
    m_path.append(String());
}

void ErrorSupport::pop()
{
    m_path.removeLast();
}

void ErrorSupport::addError(const String& error)
{
    StringBuilder builder;
    for (size_t i = 0; i < m_path.size(); ++i) {
        if (i)
            builder.append(".");
        builder.append(m_path[i]);
    }
    builder.append(": ");
    builder.append(error);
    m_errors.append(builder.toString());
}

bool ErrorSupport::hasErrors()
{
    return m_errors.size();
}

String ErrorSupport::errors()
{
    StringBuilder builder;
    for (size_t i = 0; i < m_errors.size(); ++i) {
        if (i)
            builder.append("; ");
        builder.append(m_errors[i]);
    }
    return builder.toString();
}

PassOwnPtr<Object> Object::parse(PassRefPtr<protocol::Value> value, ErrorSupport* errors)
{
    RefPtr<protocol::DictionaryValue> object = DictionaryValue::cast(value);
    if (!object) {
        errors->addError("object expected");
        return nullptr;
    }
    return adoptPtr(new Object(object.release()));
}

PassRefPtr<protocol::DictionaryValue> Object::serialize() const
{
    return m_object;
}

PassOwnPtr<Object> Object::clone() const
{
    return adoptPtr(new Object(m_object));
}

Object::Object(PassRefPtr<protocol::DictionaryValue> object) : m_object(object) { }
Object::~Object() { }

PassRefPtr<protocol::Value> toValue(int value) { return FundamentalValue::create(value); }
PassRefPtr<protocol::Value> toValue(double value) { return FundamentalValue::create(value); }
PassRefPtr<protocol::Value> toValue(bool value) { return FundamentalValue::create(value); }
PassRefPtr<protocol::Value> toValue(const String& param) { return StringValue::create(param); }

// ------------- Enum values from types.
{% for domain in api.domains %}

namespace {{domain.domain}} {
  {% for type in domain.types %}
    {% if "enum" in type %}

namespace {{type.id}}Enum {
      {% for literal in type.enum %}
const char* {{ literal | dash_to_camelcase}} = "{{literal}}";
      {% endfor %}
} // {{type.id}}Enum
    {% endif %}
    {% for property in type.properties %}
      {% if "enum" in property %}

        {% for literal in property.enum %}
const char* {{type.id}}::{{property.name | to_title_case}}Enum::{{ literal | dash_to_camelcase}} = "{{literal}}";
        {% endfor %}
      {% endif %}
    {% endfor %}
    {% if not (type.type == "object") or not ("properties" in type) %}{% continue %}{% endif %}

PassOwnPtr<{{type.id}}> {{type.id}}::parse(PassRefPtr<protocol::Value> value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    OwnPtr<{{type.id}}> result = adoptPtr(new {{type.id}}());
    RefPtr<protocol::DictionaryValue> object = DictionaryValue::cast(value);
    errors->push();
    {% for property in type.properties %}
    RefPtr<protocol::Value> {{property.name}}Value = object->get("{{property.name}}");
      {% if property.optional %}
    if ({{property.name}}Value) {
        errors->setName("{{property.name}}");
        result->m_{{property.name}} = FromValue<{{resolve_type(property).raw_type}}>::parse({{property.name}}Value, errors);
    }
      {% else %}
    errors->setName("{{property.name}}");
    result->m_{{property.name}} = FromValue<{{resolve_type(property).raw_type}}>::parse({{property.name}}Value, errors);
      {% endif %}
    {% endfor %}
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result.release();
}

PassRefPtr<protocol::DictionaryValue> {{type.id}}::serialize() const
{
    RefPtr<protocol::DictionaryValue> result = DictionaryValue::create();
    {% for property in type.properties %}
      {% if property.optional %}
    if (m_{{property.name}}.isJust())
        result->setValue("{{property.name}}", toValue(m_{{property.name}}.fromJust()));
      {% else %}
    result->setValue("{{property.name}}", toValue(m_{{property.name}}));
      {% endif %}
    {% endfor %}
    return result.release();
}

PassOwnPtr<{{type.id}}> {{type.id}}::clone() const
{
    ErrorSupport errors;
    return parse(serialize().get(), &errors);
}
  {% endfor %}
} // {{domain.domain}}
{% endfor %}

// ------------- Enum values from params.
{% for domain in api.domains %}
  {% for command in join_arrays(domain, ["commands", "events"]) %}
    {% for param in join_arrays(command, ["parameters", "returns"]) %}
      {% if "enum" in param %}

namespace {{domain.domain}} {
namespace {{command.name | to_title_case}} {
namespace {{param.name | to_title_case}}Enum {
        {% for literal in param.enum %}
const char* {{ literal | to_title_case}} = "{{literal}}";
        {% endfor %}
} // {{param.name | to_title_case}}Enum
} // {{command.name | to_title_case }}
} // {{domain.domain}}
      {% endif %}
    {% endfor %}
  {% endfor %}
{% endfor %}

} // namespace protocol
} // namespace blink
