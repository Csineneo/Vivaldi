// This file is generated

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "platform/inspector_protocol/{{class_name}}.h"

#include "platform/inspector_protocol/Collections.h"
#include "platform/inspector_protocol/FrontendChannel.h"
#include "platform/inspector_protocol/Parser.h"

namespace blink {
namespace protocol {

using protocol::Maybe;

class DispatcherImpl;

class DispatcherImplWeakPtr {
public:
    DispatcherImplWeakPtr(DispatcherImpl* dispatcher) : m_dispatcher(dispatcher) { }
    ~DispatcherImplWeakPtr();
    DispatcherImpl* get() { return m_dispatcher; }
    void dispose() { m_dispatcher = nullptr; }
private:
    DispatcherImpl* m_dispatcher;
};

class DispatcherImpl : public Dispatcher {
public:
    DispatcherImpl(FrontendChannel* frontendChannel)
        : m_frontendChannel(frontendChannel)
{% for domain in api.domains %}
        , m_{{domain.domain | lower}}Agent(0)
{% endfor %}
    {
{% for domain in api.domains %}
  {% for command in domain.commands %}
    {% if "redirect" in command %}{% continue %}{% endif %}
    {% if "handlers" in command and not ("renderer" in command["handlers"]) %}{% continue %}{% endif %}
        m_dispatchMap.set("{{domain.domain}}.{{command.name}}", &DispatcherImpl::{{domain.domain}}_{{command.name}});
  {% endfor %}
{% endfor %}

        // Initialize common errors.
        m_commonErrors.resize(LastEntry);
        m_commonErrors[ParseError] = -32700;
        m_commonErrors[InvalidRequest] = -32600;
        m_commonErrors[MethodNotFound] = -32601;
        m_commonErrors[InvalidParams] = -32602;
        m_commonErrors[InternalError] = -32603;
        m_commonErrors[ServerError] = -32000;
    }

    ~DispatcherImpl() { clearFrontend(); }

    virtual void clearFrontend()
    {
        m_frontendChannel = nullptr;
        for (auto& weak : m_weakPtrs)
            weak.first->dispose();
        m_weakPtrs.clear();
    }

    PassOwnPtr<DispatcherImplWeakPtr> weakPtr()
    {
        OwnPtr<DispatcherImplWeakPtr> weak = adoptPtr(new DispatcherImplWeakPtr(this));
        m_weakPtrs.add(weak.get());
        return weak;
    }

    virtual void dispatch(int sessionId, const String16& message);
    virtual void reportProtocolError(int sessionId, int callId, CommonErrorCode, const String16& errorMessage, ErrorSupport* errors) const;
    using Dispatcher::reportProtocolError;

    void sendResponse(int sessionId, int callId, const ErrorString& invocationError, ErrorSupport* errors, PassOwnPtr<protocol::DictionaryValue> result);

{% for domain in api.domains %}
    virtual void registerAgent(blink::protocol::Backend::{{domain.domain}}* agent) { ASSERT(!m_{{domain.domain | lower}}Agent); m_{{domain.domain | lower}}Agent = agent; }
{% endfor %}

private:
    friend class DispatcherCallbackBase;
    friend class DispatcherImplWeakPtr;
    using CallHandler = void (DispatcherImpl::*)(int sessionId, int callId, PassOwnPtr<DictionaryValue> messageObject, ErrorSupport* errors);
    using DispatchMap = protocol::HashMap<String16, CallHandler>;

{% for domain in api.domains %}
  {% for command in domain.commands %}
    {% if "redirect" in command %}{% continue %}{% endif %}
    {% if "handlers" in command and not ("renderer" in command["handlers"]) %}{% continue %}{% endif %}
    void {{domain.domain}}_{{command.name}}(int sessionId, int callId, PassOwnPtr<DictionaryValue> requestMessageObject, ErrorSupport*);
  {% endfor %}
{% endfor %}

    FrontendChannel* m_frontendChannel;

{% for domain in api.domains %}
    Backend::{{domain.domain}}* m_{{domain.domain | lower}}Agent;
{% endfor %}

    void sendResponse(int sessionId, int callId, ErrorString invocationError, PassOwnPtr<protocol::DictionaryValue> result)
    {
        sendResponse(sessionId, callId, invocationError, nullptr, std::move(result));
    }

    void sendResponse(int sessionId, int callId, ErrorString invocationError)
    {
        sendResponse(sessionId, callId, invocationError, nullptr, DictionaryValue::create());
    }

    static const char kInvalidRequest[];

    DispatchMap m_dispatchMap;
    protocol::Vector<int> m_commonErrors;
    protocol::HashSet<DispatcherImplWeakPtr*> m_weakPtrs;
};

class PLATFORM_EXPORT DispatcherCallbackBase : public protocol::Backend::CallbackBase {
public:
    DispatcherCallbackBase(PassOwnPtr<DispatcherImplWeakPtr> backendImpl, int sessionId, int id)
        : m_backendImpl(std::move(backendImpl)), m_sessionId(sessionId), m_id(id) { }
    virtual ~DispatcherCallbackBase() { }
    void dispose() { m_backendImpl = nullptr; }

protected:
    void sendIfActive(PassOwnPtr<protocol::DictionaryValue> partialMessage, const ErrorString& invocationError)
    {
        if (!m_backendImpl->get())
            return;
        m_backendImpl->get()->sendResponse(m_sessionId, m_id, invocationError, nullptr, std::move(partialMessage));
        m_backendImpl = nullptr;
    }

private:
    OwnPtr<DispatcherImplWeakPtr> m_backendImpl;
    int m_sessionId;
    int m_id;
};

DispatcherImplWeakPtr::~DispatcherImplWeakPtr()
{
    if (m_dispatcher)
        m_dispatcher->m_weakPtrs.remove(this);
}

const char DispatcherImpl::kInvalidRequest[] = "Invalid request";

{% for domain in api.domains %}
  {% for command in domain.commands %}
    {% if "redirect" in command %}{% continue %}{% endif %}
    {% if "handlers" in command and not ("renderer" in command["handlers"]) %}{% continue %}{% endif %}

    {% if "async" in command %}

class PLATFORM_EXPORT {{domain.domain}}{{command.name | to_title_case}}Callback : public Backend::{{domain.domain}}::{{command.name | to_title_case}}Callback, public DispatcherCallbackBase {
public:
    {{domain.domain}}{{command.name | to_title_case}}Callback(PassOwnPtr<DispatcherImplWeakPtr> backendImpl, int sessionId, int id)
        : DispatcherCallbackBase(std::move(backendImpl), sessionId, id) { }

    void sendSuccess(
    {%- for parameter in command.returns -%}
      {%- if "optional" in parameter -%}
        const Maybe<{{resolve_type(parameter).raw_type}}>& {{parameter.name}}
      {%- else -%}
        {{resolve_type(parameter).pass_type}} {{parameter.name}}
      {%- endif -%}
      {%- if not loop.last -%}, {% endif -%}
    {%- endfor -%}) override
    {
        OwnPtr<protocol::DictionaryValue> resultObject = DictionaryValue::create();
          {% for parameter in command.returns %}
            {% if "optional" in parameter %}
        if ({{parameter.name}}.isJust())
            resultObject->setValue("{{parameter.name}}", toValue({{parameter.name}}.fromJust()));
           {% else %}
        resultObject->setValue("{{parameter.name}}", toValue({{resolve_type(parameter).to_raw_type % parameter.name}}));
            {% endif %}
          {% endfor %}
        sendIfActive(std::move(resultObject), ErrorString());
    }

    void sendFailure(const ErrorString& error) override
    {
        ASSERT(error.length());
        sendIfActive(nullptr, error);
    }
};
    {% endif %}

void DispatcherImpl::{{domain.domain}}_{{command.name}}(int sessionId, int callId, PassOwnPtr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{
    if (!m_{{domain.domain | lower}}Agent)
        errors->addError("{{domain.domain}} handler is not available.");

    if (errors->hasErrors()) {
        reportProtocolError(sessionId, callId, InvalidParams, kInvalidRequest, errors);
        return;
    }
    {% if "parameters" in command %}

    // Prepare input parameters.
    protocol::DictionaryValue* object = DictionaryValue::cast(requestMessageObject->get("params"));
    errors->push();
      {% for property in command.parameters %}
    protocol::Value* {{property.name}}Value = object ? object->get("{{property.name}}") : nullptr;
        {% if property.optional %}
    Maybe<{{resolve_type(property).raw_type}}> in_{{property.name}};
    if ({{property.name}}Value) {
        errors->setName("{{property.name}}");
        in_{{property.name}} = FromValue<{{resolve_type(property).raw_type}}>::parse({{property.name}}Value, errors);
    }
        {% else %}
    errors->setName("{{property.name}}");
    {{resolve_type(property).type}} in_{{property.name}} = FromValue<{{resolve_type(property).raw_type}}>::parse({{property.name}}Value, errors);
        {% endif %}
      {% endfor %}
    errors->pop();
    if (errors->hasErrors()) {
        reportProtocolError(sessionId, callId, InvalidParams, kInvalidRequest, errors);
        return;
    }
    {% endif %}

    {% if "async" in command %}
    OwnPtr<{{domain.domain}}{{command.name | to_title_case}}Callback> callback = adoptPtr(new {{domain.domain}}{{command.name | to_title_case}}Callback(weakPtr(), sessionId, callId));
    {% elif "returns" in command %}
    // Declare output parameters.
    OwnPtr<protocol::DictionaryValue> result = DictionaryValue::create();
      {% for property in command.returns %}
        {% if "optional" in property %}
    Maybe<{{resolve_type(property).raw_type}}> out_{{property.name}};
        {% else %}
    {{resolve_type(property).type}} out_{{property.name}};
        {% endif %}
      {% endfor %}
    {% endif %}

    OwnPtr<DispatcherImplWeakPtr> weak = weakPtr();
    ErrorString error;
    m_{{domain.domain | lower}}Agent->{{command.name}}(&error
      {%- for property in command.parameters -%}
        {%- if "optional" in property -%}
        , in_{{property.name}}
        {%- else -%}
        , {{resolve_type(property).to_pass_type % ("in_" + property.name)}}
        {%- endif -%}
      {%- endfor %}
      {%- if "async" in command -%}
        , std::move(callback)
      {%- elif "returns" in command %}
        {%- for property in command.returns -%}
          , &out_{{property.name}}
        {%- endfor %}
      {% endif %});
    {% if "returns" in command and not("async" in command) %}
    if (!error.length()) {
      {% for parameter in command.returns %}
        {% if "optional" in parameter %}
        if (out_{{parameter.name}}.isJust())
            result->setValue("{{parameter.name}}", toValue(out_{{parameter.name}}.fromJust()));
        {% else %}
        result->setValue("{{parameter.name}}", toValue({{resolve_type(parameter).to_raw_type % ("out_" + parameter.name)}}));
        {% endif %}
      {% endfor %}
    }
    if (weak->get())
        weak->get()->sendResponse(sessionId, callId, error, std::move(result));
    {% elif not("async" in command) %}
    if (weak->get())
        weak->get()->sendResponse(sessionId, callId, error);
    {% endif %}
}
  {% endfor %}
{% endfor %}

PassOwnPtr<Dispatcher> Dispatcher::create(FrontendChannel* frontendChannel)
{
    return adoptPtr(new DispatcherImpl(frontendChannel));
}

void DispatcherImpl::dispatch(int sessionId, const String16& message)
{
    int callId = 0;
    OwnPtr<protocol::Value> parsedMessage = parseJSON(message);
    ASSERT(parsedMessage);
    OwnPtr<protocol::DictionaryValue> messageObject = DictionaryValue::cast(std::move(parsedMessage));
    ASSERT(messageObject);

    protocol::Value* callIdValue = messageObject->get("id");
    bool success = callIdValue->asNumber(&callId);
    ASSERT_UNUSED(success, success);

    protocol::Value* methodValue = messageObject->get("method");
    String16 method;
    success = methodValue && methodValue->asString(&method);
    ASSERT_UNUSED(success, success);

    protocol::HashMap<String16, CallHandler>::iterator it = m_dispatchMap.find(method);
    if (it == m_dispatchMap.end()) {
        reportProtocolError(sessionId, callId, MethodNotFound, "'" + method + "' wasn't found");
        return;
    }

    protocol::ErrorSupport errors;
    ((*this).*(*it->second))(sessionId, callId, std::move(messageObject), &errors);
}

void DispatcherImpl::sendResponse(int sessionId, int callId, const ErrorString& invocationError, ErrorSupport* errors, PassOwnPtr<protocol::DictionaryValue> result)
{
    if (invocationError.length() || (errors && errors->hasErrors())) {
        reportProtocolError(sessionId, callId, ServerError, invocationError, errors);
        return;
    }

    OwnPtr<protocol::DictionaryValue> responseMessage = DictionaryValue::create();
    responseMessage->setNumber("id", callId);
    responseMessage->setObject("result", std::move(result));
    if (m_frontendChannel)
        m_frontendChannel->sendProtocolResponse(sessionId, callId, std::move(responseMessage));
}

void Dispatcher::reportProtocolError(int sessionId, int callId, CommonErrorCode code, const String16& errorMessage) const
{
    ErrorSupport errors;
    reportProtocolError(sessionId, callId, code, errorMessage, &errors);
}

void DispatcherImpl::reportProtocolError(int sessionId, int callId, CommonErrorCode code, const String16& errorMessage, ErrorSupport* errors) const
{
    ASSERT(code >=0);
    ASSERT((unsigned)code < m_commonErrors.size());
    ASSERT(m_commonErrors[code]);
    OwnPtr<protocol::DictionaryValue> error = DictionaryValue::create();
    error->setNumber("code", m_commonErrors[code]);
    error->setString("message", errorMessage);
    ASSERT(error);
    if (errors && errors->hasErrors())
        error->setString("data", errors->errors());
    OwnPtr<protocol::DictionaryValue> message = DictionaryValue::create();
    message->setObject("error", std::move(error));
    message->setNumber("id", callId);
    if (m_frontendChannel)
        m_frontendChannel->sendProtocolResponse(sessionId, callId, std::move(message));
}

bool Dispatcher::getCommandName(const String16& message, String16* result)
{
    OwnPtr<protocol::Value> value = parseJSON(message);
    if (!value)
        return false;

    protocol::DictionaryValue* object = DictionaryValue::cast(value.get());
    if (!object)
        return false;

    if (!object->getString("method", result))
        return false;

    return true;
}

} // namespace protocol
} // namespace blink
