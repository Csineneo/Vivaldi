// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * Test fixture for tree_walker.js.
 * @constructor
 * @extends {testing.Test}
 */
function AutomationTreeWalkerUnitTest () {
  testing.Test.call(this);
};

AutomationTreeWalkerUnitTest.prototype = {
  __proto__: testing.Test.prototype,

  /** @override */
  extraLibraries: [
    'tree_walker.js',
  ],

  /** @override */
  browsePreload: DUMMY_URL,

  getSampleTree: function() {
    let loc = {left: 0, top: 0, width: 0, height: 0};
    // root
    //   middle1
    //     leaf1
    //     leaf2
    //     leaf3
    //   middle2
    //     leaf4
    //     leaf5
    let root = {location: loc, state: {}};
    let middle1 = {location: loc, state: {}};
    let middle2 = {location: loc, state: {}};
    let leaf1 = {location: loc, state: {}};
    let leaf2 = {location: loc, state: {}};
    let leaf3 = {location: loc, state: {}};
    let leaf4 = {location: loc, state: {}};
    let leaf5 = {location: loc, state: {}};

    root.firstChild = middle1;
    root.lastChild = middle2;

    middle1.parent = root;
    middle2.parent = root;
    middle1.nextSibling = middle2;
    middle2.previousSibling = middle1;
    middle1.firstChild = leaf1;
    middle1.lastChild = leaf3;
    middle2.firstChild = leaf4;
    middle2.lastChild = leaf5;

    leaf1.parent = middle1;
    leaf2.parent = middle1;
    leaf3.parent = middle1;
    leaf1.nextSibling = leaf2;
    leaf2.previousSibling = leaf1;
    leaf2.nextSibling = leaf3;
    leaf3.previousSibling = leaf2;

    leaf4.parent = middle2;
    leaf5.parent = middle2;
    leaf4.nextSibling = leaf5;
    leaf5.previousSibling = leaf4;

    return {
      root: root,
      middle1: middle1,
      middle2: middle2,
      leaf1: leaf1,
      leaf2: leaf2,
      leaf3: leaf3,
      leaf4: leaf4,
      leaf5: leaf5
    };
  }
};

TEST_F('AutomationTreeWalkerUnitTest', 'MoveToNode', function() {
  chrome.automation = {
    RoleType: {DESKTOP: 'desktop', TAB: 'tab', TAB_LIST: 'tabList'},
    StateType: {FOCUSABLE: 'focusable', OFFSCREEN: 'offscreen'}
  };

  let t = this.getSampleTree();
  let treeWalker = new AutomationTreeWalker();

  let interesting = {focusable: true};
  t.leaf1.state = interesting;
  t.leaf2.state = interesting;
  t.middle2.state = interesting;
  t.leaf5.state = interesting;

  // Move to next node.
  assertEquals(t.leaf1, treeWalker.moveToNode(t.root, t.root, true));
  assertEquals(t.leaf1, treeWalker.moveToNode(t.middle1, t.root, true));
  assertEquals(t.leaf2, treeWalker.moveToNode(t.leaf1, t.root, true));
  assertEquals(t.middle2, treeWalker.moveToNode(t.leaf2, t.root, true));
  assertEquals(t.middle2, treeWalker.moveToNode(t.leaf3, t.root, true));
  assertEquals(t.leaf5, treeWalker.moveToNode(t.middle2, t.root, true));
  assertEquals(t.leaf5, treeWalker.moveToNode(t.leaf4, t.root, true));
  assertEquals(t.leaf1, treeWalker.moveToNode(t.leaf5, t.root, true));

  // Move to previous node.
  assertEquals(t.middle2, treeWalker.moveToNode(t.leaf5, t.root, false));
  assertEquals(t.middle2, treeWalker.moveToNode(t.leaf4, t.root, false));
  assertEquals(t.leaf2, treeWalker.moveToNode(t.middle2, t.root, false));
  assertEquals(t.leaf2, treeWalker.moveToNode(t.leaf3, t.root, false));
  assertEquals(t.leaf1, treeWalker.moveToNode(t.leaf2, t.root, false));
  assertEquals(t.leaf5, treeWalker.moveToNode(t.leaf1, t.root, false));
  assertEquals(t.leaf5, treeWalker.moveToNode(t.middle1, t.root, false));
  assertEquals(t.leaf5, treeWalker.moveToNode(t.root, t.root, false));
});

TEST_F('AutomationTreeWalkerUnitTest', 'GetNextNode', function() {
  let t = this.getSampleTree();
  let treeWalker = new AutomationTreeWalker();

  let order =
      [t.root, t.middle1, t.leaf1, t.leaf2, t.leaf3,
      t.middle2, t.leaf4, t.leaf5];
  let node = t.root;
  for (let i = 0; i < order.length; i++) {
    assertEquals(order[i], node);
    node = treeWalker.getNextNode_(node);
  }
  assertEquals(undefined, node);
});

TEST_F('AutomationTreeWalkerUnitTest', 'GetPreviousNode', function() {
  let t = this.getSampleTree();
  let treeWalker = new AutomationTreeWalker();

  let order =
      [t.leaf5, t.leaf4, t.middle2, t.leaf3, t.leaf2,
      t.leaf1, t.middle1, t.root];
  let node = t.leaf5;
  for (let i = 0; i < order.length; i++) {
    assertEquals(order[i], node);
    node = treeWalker.getPreviousNode_(node);
  }
  assertEquals(undefined, node);
});

TEST_F('AutomationTreeWalkerUnitTest', 'GetYoungestDescendant', function() {
  let t = this.getSampleTree();
  let treeWalker = new AutomationTreeWalker();

  assertEquals(t.leaf5, treeWalker.getYoungestDescendant_(t.root));
  assertEquals(t.leaf3, treeWalker.getYoungestDescendant_(t.middle1));
  assertEquals(t.leaf5, treeWalker.getYoungestDescendant_(t.middle2));
  assertEquals(undefined, treeWalker.getYoungestDescendant_(t.leaf1));
  assertEquals(undefined, treeWalker.getYoungestDescendant_(t.leaf2));
  assertEquals(undefined, treeWalker.getYoungestDescendant_(t.leaf3));
  assertEquals(undefined, treeWalker.getYoungestDescendant_(t.leaf4));
  assertEquals(undefined, treeWalker.getYoungestDescendant_(t.leaf5));
});

TEST_F('AutomationTreeWalkerUnitTest', 'IsInteresting', function() {
  chrome.automation = {
    RoleType: {DESKTOP: 'desktop', TAB: 'tab', TAB_LIST: 'tabList'},
    StateType: {FOCUSABLE: 'focusable', OFFSCREEN: 'offscreen'}
  };

  let treeWalker = new AutomationTreeWalker();

  // Testing focusable.
  let loc1 = {left: 0, top: 0, width: 0, height: 0};
  let node1 = {location: loc1, state: {}};
  let node2 = {location: loc1, state: {focusable: false}};
  let node3 = {location: loc1, state: {focusable: true}};
  assertFalse(treeWalker.isInteresting_(node1));
  assertFalse(treeWalker.isInteresting_(node2));
  assertTrue(treeWalker.isInteresting_(node3));

  // Testing onscreen.
  let loc2 = {left: -1, top: 0, width: 0, height: 0};
  let loc3 = {left: 0, top: -1, width: 0, height: 0};
  let node4 = {location: loc2, state: {focusable: true}};
  let node5 = {location: loc3, state: {focusable: true}};
  assertFalse(treeWalker.isInteresting_(node4));
  assertFalse(treeWalker.isInteresting_(node5));

  // Testing if tab.
  let node6 = {location: loc1, role: 'desktop', state: {}};
  let node7 = {location: loc1, role: 'tabList', state: {}};
  let node8 =
      {location: loc1, parent: node7, root: node6, role: 'tab', state: {}};
  assertFalse(treeWalker.isInteresting_(node6));
  assertFalse(treeWalker.isInteresting_(node7));
  assertTrue(treeWalker.isInteresting_(node8));
});
