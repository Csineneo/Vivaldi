// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

GEN_INCLUDE(['../../testing/assert_additions.js']);
GEN_INCLUDE(['../../testing/chromevox_next_e2e_test_base.js']);

/**
 * Gets the braille output and asserts that it matches expected values.
 * Annotations in the output that are primitive strings are ignored.
 */
function checkBrailleOutput(expectedText, expectedSpans, output) {
  var actualOutput = output.brailleOutputForTest;
  // Remove string annotations.  These are tested in the speech output and
  // there's no need to clutter the tests with the corresponding braille
  // annotations.
  var actualSpans = actualOutput.spans_.filter(function(span) {
    return (typeof span.value !== 'string');
  });
  assertEquals(expectedText, actualOutput.toString());

  function describeSpan(span) {
    var obj = {value: span.value, start: span.start, end: span.end};
    if (obj.value instanceof Output.NodeSpan) {
      obj.value.node = (obj.value.node.name || '') + ' ' +
          obj.value.node.toString();
    }
    return JSON.stringify(obj);
  }

  function describeActualSpans() {
    return '\nAll actual spans:\n' + actualSpans.map(describeSpan).join('\n');
  }

  for (var i = 0, max = Math.max(expectedSpans.length, actualSpans.length);
       i < max; ++i) {
    var expectedSpan = expectedSpans[i];
    var actualSpan = actualSpans[i];
    if (!expectedSpan)
      throw Error('Unexpected span in ' + expectedText + ': ' +
          describeSpan(actualSpan) + describeActualSpans());
    if (!actualSpan)
      throw Error('Missing expected span in ' + expectedText + ': ' +
          describeSpan(expectedSpan) + describeActualSpans());
    var equal = true;
    if (expectedSpan.start !== actualSpan.start ||
        expectedSpan.end !== actualSpan.end) {
      equal = false;
    } else if (expectedSpan.value instanceof Output.NodeSpan &&
        (!(actualSpan.value instanceof Output.NodeSpan) ||
        expectedSpan.value.node !== actualSpan.value.node)) {
      equal = false;
    } else {
      equal = (JSON.stringify(expectedSpan.value) ===
          JSON.stringify(actualSpan.value));
    }
    if (!equal) {
      throw Error('Spans differ in ' + expectedText + ':\n' +
          'Expected: ' + describeSpan(expectedSpan) + '\n' +
          'Got     : ' + describeSpan(actualSpan) + describeActualSpans());
    }
  }
}

/**
 * Test fixture for output.js.
 * @constructor
 * @extends {ChromeVoxNextE2ETestBase}
 */
function OutputE2ETest() {
  ChromeVoxNextE2ETest.call(this);
}

OutputE2ETest.prototype = {
  __proto__: ChromeVoxNextE2ETest.prototype,

  /** @override */
  setUp: function() {
    window.Dir = AutomationUtil.Dir;
  }
};

TEST_F('OutputE2ETest', 'Links', function() {
  this.runWithLoadedTree('<a href="#">Click here</a>',
    function(root) {
      var el = root.firstChild.firstChild;
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'Click here|Link', 'spans_': [
        // Attributes.
        {value: 'name', start: 0, end: 10},

        // Link earcon (based on the name).
        {value: {earconId: 'LINK'}, start: 0, end: 10},

        {value: 'role', start: 11, end: 15}
      ]}, o.speechOutputForTest);
      checkBrailleOutput(
          'Click here lnk',
          [{value: new Output.NodeSpan(el), start: 0, end: 14}],
          o);
  });
});

TEST_F('OutputE2ETest', 'Checkbox', function() {
  this.runWithLoadedTree('<input type="checkbox">',
    function(root) {
      var el = root.firstChild.firstChild;
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: '||Check box|not checked', 'spans_': [
        // Checkbox earcon (based on the state).
        {value: {earconId: 'CHECK_OFF'}, start: 0, end: 0},

        // Attributes.
        {value: 'name', start: 1, end: 1},
        {value: 'role', start: 2, end: 11},
        {value: 'state', start: 12, end: 23}
      ]}, o.speechOutputForTest);
      checkBrailleOutput(
          'chk ( )',
          [{value: new Output.NodeSpan(el), start: 0, end: 7}],
          o);
  });
});

TEST_F('OutputE2ETest', 'InLineTextBoxValueGetsIgnored', function() {
  this.runWithLoadedTree('<p>OK',
    function(root) {
      var el = root.firstChild.firstChild.firstChild;
      assertEquals('inlineTextBox', el.role);
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'OK', 'spans_': [
        // Attributes.
        {value: 'name', start: 0, end: 2}
      ]}, o.speechOutputForTest);
      checkBrailleOutput(
          'OK',
          [{value: new Output.NodeSpan(el), start: 0, end: 2}],
          o);

      el = root.firstChild.firstChild;
      assertEquals('staticText', el.role);
      range = cursors.Range.fromNode(el);
      o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'OK', 'spans_': [
        // Attributes.
        {value: 'name', start: 0, end: 2}
      ]}, o.speechOutputForTest);
      checkBrailleOutput(
          'OK',
          [{value: new Output.NodeSpan(el), start: 0, end: 2}],
          o);
  });
});

TEST_F('OutputE2ETest', 'Headings', function() {
  this.runWithLoadedTree(function() {/*!
      <h1>a</h1><h2>b</h2><h3>c</h3><h4>d</h4><h5>e</h5><h6>f</h6>
      <h1><a href="a.com">b</a></h1> */},
    function(root) {
      var el = root.firstChild;
      for (var i = 1; i <= 6; ++i) {
        var range = cursors.Range.fromNode(el);
        var o = new Output().withSpeechAndBraille(range, null, 'navigate');
        var letter = String.fromCharCode('a'.charCodeAt(0) + i -1);
        assertEqualsJSON({string_: letter + '|Heading ' + i, 'spans_': [
          // Attributes.
          {value: 'nameOrDescendants', start: 0, end: 1}
        ]}, o.speechOutputForTest);
        checkBrailleOutput(
            letter + ' h' + i,
            [{value: new Output.NodeSpan(el), start: 0, end: 4}],
            o);
        el = el.nextSibling;
      }

      range = cursors.Range.fromNode(el);
      o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'b|Heading 1', 'spans_': [
        {value: 'nameOrDescendants', start: 0, end: 1}
      ]}, o.speechOutputForTest);
      checkBrailleOutput(
          'b h1',
          [{value: new Output.NodeSpan(el), start: 0, end: 4}],
          o);
  });
});

TEST_F('OutputE2ETest', 'Audio', function() {
  this.runWithLoadedTree('<audio src="foo.mp3" controls></audio>',
    function(root) {
      var el = root.firstChild.firstChild.firstChild.firstChild;
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON(
          {string_: 'play||Button|begin playback|audio|Tool bar|audio',
           spans_:
              [{value: {earconId: 'BUTTON'}, start: 0, end: 4},
               {value: 'value', start: 5, end: 5},
               {value: 'name', start: 28, end: 33},
               {value: 'role', start: 34, end: 42},
               {value: 'description', start: 43, end: 48}]
          }, o.speechOutputForTest);
      checkBrailleOutput(
          'play btn begin playback audio tlbar audio',
          [{value: new Output.NodeSpan(el), start: 0, end: 23},
           {value: new Output.NodeSpan(el.parent), start: 24, end: 41}],
          o);

      el = el.nextSibling.nextSibling;
      var prevRange = range;
      range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, prevRange, 'navigate');
      assertEqualsJSON({string_: '|0, , slider|audio time scrubber',
          spans_:
              [{value: {'earconId': 'SLIDER'}, start: 0, end: 0},
               {value: 'description', start: 13, end: 32}]
          }, o.speechOutputForTest);
      // TODO(plundblad): Investigate this.
      checkBrailleOutput(
          '0, , slider audio time scrubber',
          [{value: new Output.NodeSpan(el), start: 0, end: 31}],
          o);
  });
});

TEST_F('OutputE2ETest', 'Input', function() {
  this.runWithLoadedTree(
      '<input type="text"></input>' +
      '<input type="email"></input>' +
      '<input type="password"></input>' +
      '<input type="tel"></input>'          +
      '<input type="number"></input>' +
      '<input type="time"></input>' +
      '<input type="date"></input>' +
      '<input type="file"</input>' +
      '<input type="search"</input>' +
      '<input type="invalidType"</input>',
    function(root) {
      var expected = {string_: '', 'spans_': [
              {value: 'name', start: 0, end: 0},

              // Earcon
              {value: {earconId: 'EDITABLE_TEXT'}, start: 0, end: 0},

              // Selection span.
              {value: {startIndex: 0, endIndex: 0, offset: 0},
               start: 1, end: 1},

              {value: 'value', start: 1, end: 1},
              {value: 'inputType', start: 2}
      ]};

      var expectedSpeechValues = [
        '||Edit text',
        '||Edit text, email entry',
        '||Password edit text',
        '||Edit text numeric only',
        {string_: '||Spin button', spans_: [{value: 'name', start: 0, end: 0},
            {value: {earconId:'LISTBOX'}, start: 0, end: 0},
            {value: {startIndex: 0, endIndex: 0, offset: 0}, start: 1, end: 1},
            {value: 'value', start: 1, end: 1},
            {value: 'role', start: 2, end: 13}]},
        {string_: '||Time control', spans_: [{value: 'name', start: 0, end: 0},
            {value: 'value', start: 1, end: 1},
            {value: 'role', start: 2, end: 14}]},
        {string_: '||Date control', spans_: [{value: 'name', start: 0, end: 0},
            {value: 'value', start: 1, end: 1},
            {value: 'role', start: 2, end: 14}]},
        {string_: 'Choose File|No file chosen|Button',
         spans_: [{value: 'name', start: 0, end: 11},
                  {value: {earconId: "BUTTON"}, start: 0, end: 11},
                  {value: 'value', start: 12, end: 26},
                  {value: 'role', start: 27, end: 33}]},
        '||Edit text, search entry',
        '||Edit text'
      ];
      // TODO(plundblad): Some of these are wrong, there should be an initial
      // space for the cursor in edit fields.
      var expectedBrailleValues = [
        ' ed',
        ' @ed',
        ' pwded',
        ' #ed',
        ' spnbtn',
        {string_: 'time'},
        {string_: 'date'},
        {string_: 'Choose File No file chosen btn'},
        ' srched',
        ' ed'
      ];
      assertEquals(expectedSpeechValues.length, expectedBrailleValues.length);

      var el = root.firstChild.firstChild;
      expectedSpeechValues.forEach(function(expectedValue) {
        var range = cursors.Range.fromNode(el);
        var o = new Output().withSpeechAndBraille(range, null, 'navigate');
        if (typeof expectedValue == 'object') {
          assertEqualsJSON(expectedValue, o.speechOutputForTest);
        } else {
          expected.string_ = expectedValue;
          expected.spans_[4].end = expectedValue.length;
          assertEqualsJSON(expected, o.speechOutputForTest);
        }
        el = el.nextSibling;
      });

      el = root.firstChild.firstChild;
      expectedBrailleValues.forEach(function(expectedValue) {
        var range = cursors.Range.fromNode(el);
        var o = new Output().withBraille(range, null, 'navigate');
        if (typeof expectedValue === 'string') {
          checkBrailleOutput(
              expectedValue,
              [{value: {startIndex: 0, endIndex: 0, offset: 0},
                start: 0, end: 0},
               {value: new Output.NodeSpan(el), start: 0,
                end: expectedValue.length}],
              o);
        } else {
          checkBrailleOutput(
              expectedValue.string_,
              [{value: new Output.NodeSpan(el), start: 0,
                end: expectedValue.string_.length}],
              o);
        }
        el = el.nextSibling;
      });
  });
});

TEST_F('OutputE2ETest', 'List', function() {
  this.runWithLoadedTree(
      '<ul><li>a<li>b<li>c</ul>',
    function(root) {
      var el = root.firstChild.firstChild;
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'a||List item|list|with 3 items', spans_:
        [{value: 'name', start: 0, end: 1},
         {value: {earconId: 'LIST_ITEM'}, start: 0, end: 1},
         {value: 'value', start: 2, end: 2},
         {value: 'role', start: 13, end: 17}]}, o.speechOutputForTest);
      // TODO(plundblad): This output is wrong.  Add special handling for
      // braille here.
      checkBrailleOutput(
          'a lstitm list +3',
          [{value: new Output.NodeSpan(el), start: 0, end: 8},
           {value: new Output.NodeSpan(el.parent), start: 9, end: 16}],
          o);
  });
});

TEST_F('OutputE2ETest', 'Tree', function() {
  this.runWithLoadedTree(function() {/*!
    <ul role="tree">
      <li aria-expanded="true" role="treeitem">a
      <li role="treeitem">b
      <li aria-expanded="false" role="treeitem">c
    </ul>
  */},
  function(root) {
    var el = root.firstChild.children[0].firstChild;
    var range = cursors.Range.fromNode(el);
    var o = new Output().withSpeechAndBraille(range, null, 'navigate');
    assertEqualsJSON(
        {string_: 'a|Tree item|Expanded| 1 of 3 | level 1 ||Tree|with 3 items',
        spans_: [
          // TreeItem.
          {value: 'state', start: 12, end: 20},
          {value: 'name', 'start': 40, end: 40},
          {value: 'role','start': 41, end: 45},
    ]}, o.speechOutputForTest);
    // TODO(plundblad): Braille output is wrong.
    checkBrailleOutput(
        'a tritm - 1/3  level 1  tree +3',
        [{value: new Output.NodeSpan(el), start: 0, end: 1},
         {value: new Output.NodeSpan(el.parent), start: 2, end: 23},
         {value: new Output.NodeSpan(el.parent.parent), start: 24, end: 31}],
        o);

    el = root.firstChild.children[1].firstChild;
    range = cursors.Range.fromNode(el);
    o = new Output().withSpeechAndBraille(range, null, 'navigate');
    assertEqualsJSON(
        {string_: 'b|Tree item| 2 of 3 | level 1 ||Tree|with 3 items',
        spans_: [
          // TreeItem.
          {value: 'name', start: 31, end: 31},
          {value: 'role', 'start': 32, end: 36}
    ]}, o.speechOutputForTest);
    // TODO(plundblad): Braille output is wrong.
    checkBrailleOutput(
        'b tritm 2/3  level 1  tree +3',
        [{value: new Output.NodeSpan(el), start: 0, end: 1},
         {value: new Output.NodeSpan(el.parent), start: 2, end: 21},
         {value: new Output.NodeSpan(el.parent.parent), start: 22, end: 29}],
        o);

    el = root.firstChild.children[2].firstChild;
    range = cursors.Range.fromNode(el);
    o = new Output().withSpeechAndBraille(range, null, 'navigate');
    assertEqualsJSON(
        {string_: 'c|Tree item|Collapsed| 3 of 3 | level 1 ||Tree|with 3 items',
        spans_: [
          // TreeItem.
          {value: 'state', start: 12, end: 21},
          {value: 'name', 'start': 41, end: 41},
          {value: 'role','start': 42, end: 46},
    ]}, o.speechOutputForTest);
    // TODO(plundblad): Braille output is wrong.
    checkBrailleOutput(
        'c tritm + 3/3  level 1  tree +3',
        [{value: new Output.NodeSpan(el), start: 0, end: 1},
         {value: new Output.NodeSpan(el.parent), start: 2, end: 23},
         {value: new Output.NodeSpan(el.parent.parent), start: 24, end: 31}],
        o);
  });
});

TEST_F('OutputE2ETest', 'Menu', function() {
  this.runWithLoadedTree(function() {/*!
    <div role="menu">
      <div role="menuitem">a</div>
    </div>
  */},
  function(root) {
    var el = root.firstChild.firstChild;
    var range = cursors.Range.fromNode(el);
    var o = new Output().withSpeechAndBraille(range, null, 'navigate');
    assertEqualsJSON({string_: 'a|Menu item| 1 of 1 ||Menu', spans_:
        [{value: {earconId: 'BUTTON'}, start : 0, end: 1},
         {value: 'name', start: 21, end: 21},
         {value: {earconId: 'LISTBOX'}, start: 21, end: 21},
         {value: 'role', start: 22, end: 26}]}, o.speechOutputForTest);
    checkBrailleOutput(
        'a mnuitm 1/1 mnu',
        [{value: new Output.NodeSpan(el), start: 0, end: 12},
         {value: new Output.NodeSpan(el.parent), start: 13, end: 16}],
        o);
  });
});

TEST_F('OutputE2ETest', 'ListBox', function() {
  this.runWithLoadedTree(function() {/*!
    <select multiple>
      <option>1</option>
      <option>2</option>
    </select>
  */},
  function(root) {
    var el = root.firstChild.firstChild.firstChild;
    var range = cursors.Range.fromNode(el);
    var o = new Output().withSpeechAndBraille(range, null, 'navigate');
    assertEqualsJSON({string_: '1|List item| 1 of 2 ||List box|with 2 items',
        spans_:
            [{value: 'name', start: 0,end: 1},
             {value: {earconId: 'LIST_ITEM'}, start: 0,end: 1},
             {value: 'nameFromNode', start: 21, end: 21},
             {value: 'role', start: 22, end: 30}]}, o.speechOutputForTest);
    checkBrailleOutput(
        '1 lstitm 1/2 lstbx +2',
        [{value: new Output.NodeSpan(el), start: 0, end: 12},
         {value: new Output.NodeSpan(el.parent), start: 13, end: 21}],
        o);
  });
});

SYNC_TEST_F('OutputE2ETest', 'MessageIdAndEarconValidity', function() {
  for (var key in Output.ROLE_INFO_) {
    var value = Output.ROLE_INFO_[key];
    Msgs.getMsg(value.msgId);
    Msgs.getMsg(value.msgId + '_brl');
    assertFalse(/[A-Z]+/.test(value.msgId));
    if (value.earconId)
      assertNotNullNorUndefined(cvox.Earcon[value.earconId]);
  }
  for (var key in Output.STATE_INFO_) {
    var value = Output.STATE_INFO_[key];
    for (innerKey in value) {
      var innerValue = value[innerKey];
      Msgs.getMsg(innerValue.msgId);
      Msgs.getMsg(innerValue.msgId + '_brl');
      assertFalse(/[A-Z]+/.test(innerValue.msgId));
      if (innerValue.earconId)
        assertNotNullNorUndefined(cvox.Earcon[innerValue.earconId]);
    }
  }
  for (var key in Output.INPUT_TYPE_MESSAGE_IDS_) {
    var msgId = Output.INPUT_TYPE_MESSAGE_IDS_[key];
    assertFalse(/[A-Z]+/.test(msgId));
    Msgs.getMsg(msgId);
    Msgs.getMsg(msgId + '_brl');
  }
});

TEST_F('OutputE2ETest', 'DivOmitsRole', function() {
  this.runWithLoadedTree(function() {/*!
    <div>that has content</div>
    <div></div>
    <div role='group'><div>nested content</div></div>
  */},
  function(root) {
    var el = root.firstChild.firstChild;
    var range = cursors.Range.fromNode(el);
    var o = new Output().withSpeechAndBraille(range, null, 'navigate');
    assertEqualsJSON({string_: 'that has content|',
        spans_: [
          {value: 'name', start: 0, end: 16},
          {value: 'nameFromNode', start: 17, end: 17}
          ]}, o.speechOutputForTest);
    checkBrailleOutput(
        'that has content',
        [{value: new Output.NodeSpan(el), start: 0, end: 16}],
        o);
  });
});

TEST_F('OutputE2ETest', 'LessVerboseAncestry', function() {
  this.runWithLoadedTree(function() {/*!
    <div role="article"><p>inside</p></div>
    <div role="article"><p>inside</p></div>
    <div role="banner"><p>inside</p></div>
  */},
  function(root) {
    var first = root.children[0].firstChild;
    var second = root.children[1].firstChild;
    var third = root.children[2].firstChild;
    var firstRange = cursors.Range.fromNode(first);
    var secondRange = cursors.Range.fromNode(second);
    var thirdRange = cursors.Range.fromNode(third);

    var oWithoutPrev = new Output().withSpeech(firstRange, null, 'navigate');
    var oWithPrev =
        new Output().withSpeech(secondRange, firstRange, 'navigate');
    var oWithPrevExit =
        new Output().withSpeech(thirdRange, secondRange, 'navigate');
    assertEquals('inside||Article', oWithoutPrev.speechOutputForTest.string_);

    // Make sure we don't read the exited article ancestry change.
    assertEquals('inside||Article', oWithPrev.speechOutputForTest.string_);

    // Different role; do read the exited article ancestry here.
    assertEquals('inside|Exited Article.||Banner',
                 oWithPrevExit.speechOutputForTest.string_);
  });
});

TEST_F('OutputE2ETest', 'Brief', function() {
  this.runWithLoadedTree(function() {/*!
    <div role="article"><p>inside</p></div>
  */},
  function(root) {
    var node = root.children[0].firstChild;
    var range = cursors.Range.fromNode(node);

    localStorage['useVerboseMode'] = 'false';
    var oWithoutPrev = new Output().withSpeech(range, null, 'navigate');
    assertEquals('inside|', oWithoutPrev.speechOutputForTest.string_);
  });
});

TEST_F('OutputE2ETest', 'AuralStyledHeadings', function() {

  function toFixed(num) {
    return parseFloat(Number(num).toFixed(1));
  }
  this.runWithLoadedTree(function() {/*!
      <h1>a</h1><h2>b</h2><h3>c</h3><h4>d</h4><h5>e</h5><h6>f</h6>
      <h1><a href="a.com">b</a></h1> */},
    function(root) {
      var el = root.firstChild;
      for (var i = 1; i <= 6; ++i) {
        var range = cursors.Range.fromNode(el);
        var o = new Output().withRichSpeech(range, null, 'navigate');
        var letter = String.fromCharCode('a'.charCodeAt(0) + i -1);
        assertEqualsJSON({string_: letter + '|Heading ' + i, 'spans_': [
          // Aural styles.
          {value: {'relativePitch': toFixed(-0.1 * i)}, start: 0, end: 0},

          // Attributes.
          {value: 'nameOrDescendants', start: 0, end: 1},

          {value: {'relativePitch': -0.2}, start: 2, end: 2}
        ]}, o.speechOutputForTest);
        el = el.nextSibling;
      }
  });
});
TEST_F('OutputE2ETest', 'ToggleButton', function() {
  this.runWithLoadedTree(function() {/*!
      <div role="button" aria-pressed="true">Subscribe</div>*/},
    function(root) {
      var el = root.firstChild;
      var o = new Output().withSpeech(cursors.Range.fromNode(el));
      assertEqualsJSON({string_: '|Subscribe|Button|Pressed', spans_: [
        {value: {earconId: 'CHECK_ON'}, start: 0, end: 0},
        {value: 'name', start: 1, end:10},
        {value: 'role', start: 11, end: 17},
        {value: 'state', start: 18, end: 25}
      ]}, o.speechOutputForTest);
  });
});

TEST_F('OutputE2ETest', 'JoinDescendants', function() {
  this.runWithLoadedTree(function() {/*!
      <p>This</p>
      <p>fragment</p>
      <p>Should be separated</p>
      <p>with spaces</p>
    */},
    function(root) {
      var unjoined = new Output().format('$descendants', root);
      assertEquals('This|fragment|Should be separated|with spaces'
                   , unjoined.speechOutputForTest.string_);

      var joined = new Output().format('$joinedDescendants', root);
      assertEquals('This fragment Should be separated with spaces'
                   , joined.speechOutputForTest.string_);
  });
});

TEST_F('OutputE2ETest', 'ComplexDiv', function() {
  this.runWithLoadedTree(function() {/*!
      <div><button>ok</button></div>
    */},
    function(root) {
      var div = root.find({role: 'div'});
      var o = new Output().withSpeech(cursors.Range.fromNode(div));
      assertEquals('|ok||Button'
                   , o.speechOutputForTest.string_);
  });
});
