{%- macro declare_params(prefix, parameters) %}
{%-   for param in parameters -%}
{{param.kind|cpp_const_wrapper_type}} {{prefix}}{{param.name}}
{%- if not loop.last %}, {% endif %}
{%-   endfor %}
{%- endmacro %}

{%- macro declare_callback(method, for_blink) -%}
mojo::Callback<void(
{%-   for param in method.response_parameters -%}
{#- TODO(yzshen): Previously |cpp_result_type| is used here incorrectly.
    The outcome is we will use mojo::String instead of const mojo::String&.
    Preserve the behavior temporarily. #}
{%- if (not param.kind|is_string_kind) or for_blink -%}
{{param.kind|cpp_const_wrapper_type}}
{%- else -%}
mojo::String
{%- endif %}
{%- if not loop.last %}, {% endif %}
{%-   endfor -%}
)>
{%- endmacro -%}

{%- macro declare_request_params(prefix, method) -%}
{{declare_params(prefix, method.parameters)}}
{%-   if method.response_parameters != None -%}
{%- if method.parameters %}, {% endif -%}
const {{method.name}}Callback& callback
{%-   endif -%}
{%- endmacro -%}

{%- macro declare_sync_method_params(prefix, method) -%}
{{declare_params(prefix, method.parameters)}}
{%-   if method.response_parameters %}
{%-     if method.parameters %}, {% endif %}
{%-     for param in method.response_parameters -%}
{{param.kind|cpp_wrapper_type}}* {{prefix}}{{param.name}}
{%-       if not loop.last %}, {% endif %}
{%-     endfor %}
{%-   endif -%}
{%- endmacro -%}
