import("//build/config/features.gni")
import("//vivaldi/gn/config/features.gni")

# ------------------
# Blink : /media/blink/BUILD.gn
# ------------------

post_process_target("//media/blink:blink") {
  sources += [
    "//vivaldi/platform_media/renderer/data_source/buffered_data_source.cc",
    "//vivaldi/platform_media/renderer/data_source/buffered_data_source.h",
    "//vivaldi/platform_media/renderer/data_source/buffered_resource_loader.cc",
    "//vivaldi/platform_media/renderer/data_source/buffered_resource_loader.h",
  ]
}

if (system_proprietary_codecs) {

# ------------------
# Content Unittests : /content/test/BUILD.gn
# ------------------

post_process_target("//media/test:pipeline_integration_test_base") {
  sources += [
    "//vivaldi/platform_media/gpu/test/platform_pipeline_test_base.cc",
    "//vivaldi/platform_media/gpu/test/platform_pipeline_test_base.h",
    "//vivaldi/platform_media/gpu/test/test_pipeline_host.cc",
    "//vivaldi/platform_media/gpu/test/test_pipeline_host.h",
  ]
}

post_process_target("//content/test:content_unittests") {
  sources += [
    "//vivaldi/platform_media/gpu/test/ipc_audio_decoder_unittest.cc",
    "//vivaldi/platform_media/gpu/test/platform_media_pipeline_integration_test.cc",
  ]

  if (is_mac) {
    sources += [
      "//vivaldi/platform_media/gpu/test/mac/avf_data_buffer_queue_unittest.mm",
      "//vivaldi/platform_media/gpu/test/mac/data_request_handler_unittest.mm",
    ]
    # VB-24641 dispatch_get_current_queue is deprecated
    cflags = [ "-Wno-deprecated-declarations" ]
  }

  deps += [ "//media/test:pipeline_integration_test_base" ]
}

# ------------------
# Gpu Ipc Service (Media) : /media/gpu/ipc/service/BUILD.gn
# ------------------

post_process_target("//media/gpu/ipc/service:service") {
  sources += [
  "//vivaldi/platform_media/renderer/pipeline/ipc_media_pipeline_host_impl.cc",
  "//vivaldi/platform_media/renderer/pipeline/ipc_media_pipeline_host_impl.h",
  "//vivaldi/platform_media/gpu/data_source/ipc_data_source_impl.cc",
  "//vivaldi/platform_media/gpu/data_source/ipc_data_source_impl.h",
  "//vivaldi/platform_media/gpu/pipeline/ipc_media_pipeline.cc",
  "//vivaldi/platform_media/gpu/pipeline/ipc_media_pipeline.h",
  "//vivaldi/platform_media/gpu/pipeline/propmedia_gpu_channel.cc",
  "//vivaldi/platform_media/gpu/pipeline/propmedia_gpu_channel.h",
  "//vivaldi/platform_media/gpu/pipeline/propmedia_gpu_channel_manager.cc",
  "//vivaldi/platform_media/gpu/pipeline/propmedia_gpu_channel_manager.h",
  ]
  deps += [
  "//third_party/WebKit/public:blink_headers",
  ]
}

# ------------------
# Gpu Ipc (Media) : /media/gpu/ipc/common/BUILD.gn
# ------------------

post_process_target("//media/gpu/ipc/common:common") {
  sources += [
  "//vivaldi/platform_media/common/platform_media_pipeline_types.h",
  "//vivaldi/platform_media/common/media_pipeline_messages.h",
  ]
}

# ------------------
# Gpu Service (UI) : /services/ui/gpu/BUILD.gn
# ------------------

post_process_target("//services/ui/gpu:gpu") {
  public_deps = [ "//cc", ]
}

# ------------------
# CC Component : /cc/BUILD.gn
# ------------------

post_process_target("//cc:cc") {
  public_deps += [ "//media", ]
}

# ------------------
# Content Common : /content/common/BUILD.gn
# ------------------

post_process_target("//content/common:common") {
  if (is_mac) {
    sources += [
      "//vivaldi/platform_media/common/mac/at_init.cc",
      "//vivaldi/platform_media/common/mac/at_init.h",
    ]

    libs += [
      "AudioToolbox.framework",
    ]
  }
}

# ------------------
# Media : /media/BUILD.gn
# ------------------

post_process_target("//media:media") {
  sources += [
    "//vivaldi/platform_media/gpu/data_source/ipc_data_source.h",
    "//vivaldi/platform_media/gpu/pipeline/platform_media_pipeline.h",
    "//vivaldi/platform_media/gpu/pipeline/platform_media_pipeline_create.h",
  ]

  if (is_linux) {
    sources += [ "//vivaldi/platform_media/gpu/pipeline/linux/platform_media_pipeline_linux.cc" ]
  }

  if (is_mac) {
    sources += [
      "//vivaldi/platform_media/gpu/decoders/mac/avf_audio_tap.h",
      "//vivaldi/platform_media/gpu/decoders/mac/avf_audio_tap.mm",
      "//vivaldi/platform_media/gpu/decoders/mac/avf_data_buffer_queue.mm",
      "//vivaldi/platform_media/gpu/decoders/mac/avf_data_buffer_queue.h",
      "//vivaldi/platform_media/gpu/decoders/mac/avf_media_decoder.h",
      "//vivaldi/platform_media/gpu/decoders/mac/avf_media_decoder.mm",
      "//vivaldi/platform_media/gpu/decoders/mac/avf_media_reader.h",
      "//vivaldi/platform_media/gpu/decoders/mac/avf_media_reader.mm",
      "//vivaldi/platform_media/gpu/decoders/mac/data_request_handler.h",
      "//vivaldi/platform_media/gpu/decoders/mac/data_request_handler.mm",
      "//vivaldi/platform_media/gpu/decoders/mac/data_source_loader.h",
      "//vivaldi/platform_media/gpu/decoders/mac/data_source_loader.mm",
      "//vivaldi/platform_media/gpu/pipeline/mac/avf_media_pipeline.h",
      "//vivaldi/platform_media/gpu/pipeline/mac/avf_media_pipeline.mm",
      "//vivaldi/platform_media/gpu/pipeline/mac/avf_media_reader_runner.h",
      "//vivaldi/platform_media/gpu/pipeline/mac/avf_media_reader_runner.mm",
      "//vivaldi/platform_media/gpu/pipeline/mac/platform_media_pipeline_mac.cc",
    ]

    libs += [
      "AudioToolbox.framework",
      "AVFoundation.framework",
      "CoreMedia.framework",
      "CoreVideo.framework",
      "MediaToolbox.framework",
      "VideoToolbox.framework",
      "CoreServices.framework",
    ]

    # VB-18038 audio doesn't work with -O2
    configs -= [ "//build/config/compiler:default_optimization" ]
    configs += [ "//build/config/compiler:optimize_medium" ]

    # VB-24641 dispatch_get_current_queue is deprecated
    cflags = [ "-Wno-deprecated-declarations" ]
  }

  if (is_win) {
    sources += [
      "//vivaldi/platform_media/gpu/decoders/win/wmf_byte_stream.cc",
      "//vivaldi/platform_media/gpu/decoders/win/wmf_byte_stream.h",
      "//vivaldi/platform_media/gpu/pipeline/win/platform_media_pipeline_win.cc",
      "//vivaldi/platform_media/gpu/pipeline/win/wmf_media_pipeline.cc",
      "//vivaldi/platform_media/gpu/pipeline/win/wmf_media_pipeline.h",
    ]

    libs += [
      "d3d9.lib",
      "dxva2.lib",
      "strmiids.lib",
      "mf.lib",
      "mfplat.lib",
      "mfreadwrite.lib",
      "mfuuid.lib",
      "Propsys.lib",
    ]

    deps += [ "//net" ]  # For GetMimeTypeFromFile
  }
}

# ------------------
# Media : /media/BUILD.gn
# ------------------

post_process_target("//media:media") {

   sources += [
    "//vivaldi/platform_media/common/platform_media_pipeline_constants.cc",
    "//vivaldi/platform_media/common/platform_media_pipeline_constants.h",
    "//vivaldi/platform_media/renderer/decoders/ipc_audio_decoder.cc",
    "//vivaldi/platform_media/renderer/decoders/ipc_audio_decoder.h",
    "//vivaldi/platform_media/renderer/decoders/ipc_demuxer.cc",
    "//vivaldi/platform_media/renderer/decoders/ipc_demuxer.h",
    "//vivaldi/platform_media/renderer/decoders/ipc_demuxer_stream.cc",
    "//vivaldi/platform_media/renderer/decoders/ipc_demuxer_stream.h",
    "//vivaldi/platform_media/renderer/decoders/pass_through_audio_decoder.cc",
    "//vivaldi/platform_media/renderer/decoders/pass_through_audio_decoder.h",
    "//vivaldi/platform_media/renderer/decoders/pass_through_decoder_impl.cc",
    "//vivaldi/platform_media/renderer/decoders/pass_through_decoder_impl.h",
    "//vivaldi/platform_media/renderer/decoders/pass_through_decoder_texture.cc",
    "//vivaldi/platform_media/renderer/decoders/pass_through_decoder_texture.h",
    "//vivaldi/platform_media/renderer/decoders/pass_through_video_decoder.cc",
    "//vivaldi/platform_media/renderer/decoders/pass_through_video_decoder.h",
    "//vivaldi/platform_media/renderer/pipeline/ipc_media_pipeline_host.h",
    "//vivaldi/platform_media/renderer/pipeline/protocol_sniffer.cc",
    "//vivaldi/platform_media/renderer/pipeline/protocol_sniffer.h",
   ]

   deps += [ "//net" ]  # For GetMimeTypeFromFile

   if (is_mac) {
      sources += [
       "//vivaldi/platform_media/common/mac/platform_media_pipeline_types_mac.h",
       "//vivaldi/platform_media/common/mac/platform_media_pipeline_types_mac.mm",
       "//vivaldi/platform_media/renderer/decoders/mac/at_aac_helper.cc",
       "//vivaldi/platform_media/renderer/decoders/mac/at_aac_helper.h",
       "//vivaldi/platform_media/renderer/decoders/mac/at_audio_decoder.cc",
       "//vivaldi/platform_media/renderer/decoders/mac/at_audio_decoder.h",
       "//vivaldi/platform_media/renderer/decoders/mac/at_codec_helper.h",
       "//vivaldi/platform_media/renderer/decoders/mac/at_mp3_helper.cc",
       "//vivaldi/platform_media/renderer/decoders/mac/at_mp3_helper.h",
       "//vivaldi/platform_media/renderer/decoders/mac/core_audio_demuxer.cc",
       "//vivaldi/platform_media/renderer/decoders/mac/core_audio_demuxer.h",
       "//vivaldi/platform_media/renderer/decoders/mac/core_audio_demuxer_stream.cc",
       "//vivaldi/platform_media/renderer/decoders/mac/core_audio_demuxer_stream.h",
      ]
   }

   if (is_win) {
      sources += [
       "//vivaldi/platform_media/renderer/decoders/win/wmf_audio_decoder.cc",
       "//vivaldi/platform_media/renderer/decoders/win/wmf_audio_decoder.h",
       "//vivaldi/platform_media/renderer/decoders/win/wmf_decoder_impl.cc",
       "//vivaldi/platform_media/renderer/decoders/win/wmf_decoder_impl.h",
       "//vivaldi/platform_media/renderer/decoders/win/wmf_video_decoder.cc",
       "//vivaldi/platform_media/renderer/decoders/win/wmf_video_decoder.h",
      ]

      libs += [
       "mfuuid.lib",
       "mfplat.lib",
      ]

      deps += [
       "//media/base/win:win",
      ]
   }
}

# ------------------
# Test files
# ------------------

#vivaldi/platform_media/gpu/test/data/bear_truncated.mp4
#vivaldi/platform_media/gpu/test/data/config_change_audio.mp4
#vivaldi/platform_media/gpu/test/data/config_change_video.mp4
#vivaldi/platform_media/gpu/test/data/what-does-the-fox-say.mp4
#vivaldi/platform_media/gpu/test/data/a440.mp3
#vivaldi/platform_media/gpu/test/data/bear-320x240-16x9-aspect.mp4
#vivaldi/platform_media/gpu/test/data/bear_corrupt.mp4
#vivaldi/platform_media/gpu/test/data/nonzero-start-time.mp4

# ------------------
# Filters : /media/base/BUILD.gn
# ------------------

post_process_target("//media/base:base") {

   sources += [
    "//vivaldi/platform_media/common/pipeline_stats.cc",
    "//vivaldi/platform_media/common/pipeline_stats.h",
    "//vivaldi/platform_media/common/platform_mime_util.h",
   ]

   if (is_linux) {
    sources += [ "//vivaldi/platform_media/common/linux/platform_mime_util_linux.cc" ]
   }

   if (is_mac) {
    sources += [ "//vivaldi/platform_media/common/mac/platform_mime_util_mac.mm" ]
   }

   if (is_win) {
    configs += [
      "//media:media_implementation",
    ]
    sources += [
      "//vivaldi/platform_media/common/win/mf_util.cc",
      "//vivaldi/platform_media/common/win/mf_util.h",
      "//vivaldi/platform_media/common/win/platform_mime_util_win.cc",
    ]
    deps += [
     "//media/base/win:win",
    ]
   }
}

# ------------------
# Mac : /media/base/mac/BUILD.gn
# ------------------

if (is_mac) {
   post_process_target("//media/base/mac:mac") {
     sources += [
       "//vivaldi/platform_media/common/mac/framework_type_conversions.h",
       "//vivaldi/platform_media/common/mac/framework_type_conversions.mm",
       "//vivaldi/platform_media/common/mac/scoped_audio_queue_ref.h",
     ]
   }
}

}
