import("//vivaldi/gn/config/features.gni")
import("//vivaldi/gn/config/product.gni")
import("//build/config/locales.gni")
import("//build/util/process_version.gni")
import("//tools/grit/repack.gni")

import("resources/vivaldi_grit.gni")

source_set("app") {
  sources = [
    "vivaldi.rc",
  ]

  public_deps = [
    ":resources",
  ]
}

group("resources") {
  public_deps = [
    ":vivaldi_native_resources",
    ":vivaldi_native_strings",
    ":vivaldi_unscaled_native_resources",
    "resources",
  ]
}

if (generate_untranslated){
  group("generate_untranslated") {
    deps = [
      ":Extract_strings_vivaldi_native_strings"
    ]
  }
}

single_grit_action("vivaldi_native_strings") {
  grit_out_dir = "$root_gen_dir/vivaldi"
  source = "native_resources/vivaldi_native_strings.grd"
  grit_resource_ids = "//vivaldi/app/gritsettings/resource_ids"
  have_strings = true
}

grit("vivaldi_native_resources") {
  output_dir = "$root_gen_dir/vivaldi"
  resource_ids = "//vivaldi/app/gritsettings/resource_ids"
  source = "native_resources/vivaldi_native_resources.grd"
  outputs = exec_script(gritinfo_cmd,
                        grit_defines + [
                              "--outputs",
                              ".",
                              rebase_path(source, root_build_dir),
                              "-f",
                              rebase_path(resource_ids, root_build_dir),
                            ],
                        "list lines")
}

grit("vivaldi_unscaled_native_resources") {
  output_dir = "$root_gen_dir/vivaldi"
  resource_ids = "//vivaldi/app/gritsettings/resource_ids"
  source = "native_resources/vivaldi_native_unscaled.grd"
  outputs = exec_script(gritinfo_cmd,
                        grit_defines + [
                              "--outputs",
                              ".",
                              rebase_path(source, root_build_dir),
                              "-f",
                              rebase_path(resource_ids, root_build_dir),
                            ],
                        "list lines")
}

action("write_translation_xml_generation_script") {
  script = "//vivaldi/app/resources/gen_write_translations_script.py"
  inputs = [ script ]
  outputs = [ "$root_out_dir/generate_translation_xml.py" ]

  args = rebase_path(outputs, root_out_dir) + locales + vivaldi_pending_locales
}

config("vivaldi_app_config") {
  include_dirs = ["$target_gen_dir/vivaldi"]
}

process_version("vivaldi_icon") {
  template_file = "vivaldi_icon.h.in"
  output = "$root_gen_dir/app/vivaldi_icon.h"
  extra_args = [
    "-e",
    "VIVALDI_RELEASE_KIND=\"$VIVALDI_RELEASE_KIND\"",
  ]
}

repack_locales("vivaldi_merge_repacks") {
  if (is_mac) {
    output_dir = "$root_gen_dir/repack"
    copy_data_to_bundle = true
  } else {
    output_dir = "$root_out_dir/locales"
  }

  # Each input pak file should also have a deps line.
  source_patterns = [
    "${root_gen_dir}/components/strings/components_google_chrome_strings_",
    "${root_gen_dir}/components/strings/components_strings_",
    "${root_gen_dir}/content/app/strings/content_strings_",
    "${root_gen_dir}/chrome/generated_resources_",
    "${root_gen_dir}/chrome/google_chrome_strings_",
    "${root_gen_dir}/chrome/platform_locale_settings_",
    "${root_gen_dir}/ui/strings/ui_strings_",
    "${root_gen_dir}/vivaldi/vivaldi_native_strings_",
  ]
  deps = [
    "//chrome/app:generated_resources",
    "//chrome/app:google_chrome_strings",
    "//chrome/app/resources:platform_locale_settings",
    "//components/strings:components_google_chrome_strings",
    "//components/strings:components_strings",
    "//content/app/strings:strings",
    "//ui/strings:ui_strings",
    "//vivaldi/app:vivaldi_native_strings",
  ]
  input_locales = vivaldi_pending_locales
  output_locales = vivaldi_pending_locales
}
