import("//build/config/chrome_build.gni")
import("//build/config/sanitizers/sanitizers.gni")

_disabled_targets = [
  # base.gyp
  ":build_utf8_validator_tables",
  ":check_example",

  #gcm.gyp
  ":mcs_probe",

  #gin.gyp
  ":gin_shell",

  #net.gyp
  ":net_perftests",
  ":dump_cache",
  ":quic_client",
  ":quic_server",

  "//media/cast:testing_tools",
  ":telemetry_gpu_integration_test",

  "//v8:v8_hello_world",
  "//v8:v8_parser_shell",
  "//v8:v8_sample_process",
  "//v8:v8_simple_json_fuzzer",
  "//v8:v8_simple_parser_fuzzer",
  "//v8:v8_simple_regexp_fuzzer",
  "//v8:v8_simple_wasm_fuzzer",
  "//chrome/test:telemetry_perf_unittests",
]

if (is_android || is_linux) {
  _disabled_targets+=[
    ":disk_cache_memory_test",
  ]
}

if (is_linux) {
  _disabled_targets+=[
    ":epoll_quic_client",
    ":epoll_quic_server",
    ":tap_proxy",
  ]
}

if (is_win) {
  _disabled_targets+=[
    ":blacklist_test_main_dll",
    ":dll_hash_main",
    ":pe_image_test",
    ":pocdll",
    ":rlz_id",
    ":wifi_test",
  ]
}

if (!is_android) {
  _disabled_targets+=[
    ":chromedriver",
    ":courgette_minimal_tool",
    ":generate_barcode_video",
    ":generate_timecode_audio",
    ":run_sync_testserver",
    ":image_operations_bench",
    ":filter_fuzz_stub",
    ":telemetry_unittests",
    "//tools/battor_agent:battor_agent",
    "//net:tld_cleanup",
    "//net:crash_cache",
    "//net:crl_set_dump",
    "//net:dns_fuzz_stub",
    "//net:gdig",
    "//net:get_server_time",
    "//net:hpack_example_generator",
    "//net:net_watcher",
    "//net:run_testserver",
    "//net:stress_cache",
  ]
  if (!is_mac) {
    _disabled_targets+=[
      "//ui/aura:demo",
    ]
  }
}

_disabled_templates = [
  ":base_perftests",
  ":base_i18n_perftests",

  # cc_tests.gyp
  ":cc_perftests",

  #chrome_test_unit.gypi
  ":components_perftests",
  ":components_browsertests",

  #events.gyp
  ":events_unittests",

  ":gcm_unit_tests",

  #gpu.gyp
  ":gin_unittests",
  ":gpu_perftests",
  ":gl_tests",

  #ipc.gyp
  ":ipc_perftests",

  #media.gyp
  ":audio_unittests",
  ":media_perftests",

  #midi.gyp
  ":midi_unittests",

  #mojo_base.gyp
  ":mojo_common_unittests",

  "//cc/blink:cc_blink_unittests",
  "//third_party/WebKit/Source/controller:webkit_unit_tests",
  "//third_party/WebKit/Source/platform/heap:blink_heap_unittests",
  "//third_party/WebKit/Source/platform:blink_platform_unittests",
  "//third_party/WebKit/Source/platform/wtf:wtf_unittests",
  "//media/capture:capture_unittests",
  "//skia:skia_unittests",
  "//ui/shell_dialogs:shell_dialogs_unittests",
  "//ui/touch_selection:ui_touch_selection_unittests",
  "//media/blink:media_blink_unittests",
  "//media/mojo:media_mojo_unittests",
  "//media/mojo/services:media_pipeline_integration_unittests",
  "//content/test:content_perftests",
  "//components/proximity_auth:proximity_auth_unittests",
  "//gpu/ipc/service:gpu_ipc_service_unittests",
  "//gpu:command_buffer_gles2_tests",
  "//third_party/libaddressinput:libaddressinput_unittests",
  "//url/ipc:url_ipc_unittests",
  "//ui/native_theme:native_theme_unittests",
  "//ui/gl:gl_unittests",
  "//ui/display:display_unittests",
  "//ui/base:ui_base_unittests",
  "//components/filesystem:filesystem_service_unittests",
  "//components/leveldb:leveldb_service_unittests",
  "//third_party/libphonenumber:libphonenumber_unittests",
  "//mojo/edk/test:mojo_public_system_perftests",
  "//mojo/edk/system:mojo_message_pipe_perftests",
  "//mojo/edk/test:mojo_public_bindings_perftests",
  "//mojo/edk/test:mojo_public_system_unittests",
  "//mojo/edk/system:mojo_system_unittests",
  "//mojo/edk/test:mojo_public_bindings_unittests",
]

if (is_win) {
  _disabled_templates += [
    "//chrome_elf:chrome_elf_unittests",
    "//chrome/install_static:install_static_unittests",
    "//chrome/installer/setup:setup_unittests",
    "//chrome/installer/util:installer_util_unittests",
    "//rlz:rlz_unittests",
    "//sandbox/win:sandbox_poc",
  ]
  if (is_multi_dll_chrome && is_syzyasan) {
    _disabled_targets+=[
      "//chrome/tools/build/win/syzygy:chrome_dll_syzygy",
      "//chrome/tools/build/win/syzygy:chrome_child_dll_syzygy",
    ]
  }
}

if (is_win || is_linux) {
  _disabled_templates += [
    "//ui/views/mus:views_mus_interactive_ui_tests",
    "//ui/views/mus:views_mus_unittests",
  ]
}

if (is_mac) {
  _disabled_templates+=[
    "//ui/base:ui_unittests_framework",
  ]
}

if (is_android || is_win) {
  _disabled_templates += [
    "//media/gpu:video_decode_accelerator_unittest",
  ]
}

if (!is_android) {
  _disabled_templates += [
    ":accessibility_unittests",
    ":chromedriver_tests",
    ":performance_browser_tests",
    ":cast_benchmarks",
    ":chrome_app_unittests",
    ":courgette_fuzz",
    ":ffmpeg_regression_tests",
    ":sync_performance_tests",
    ":load_library_perf_tests",
    ":snapshot_unittests",
    "//extensions:extensions_unittests",
    "//extensions:extensions_browsertests",
    "//third_party/leveldatabase:env_chromium_unittests",
    "//third_party/leveldatabase:leveldb_arena_test",
    "//third_party/leveldatabase:leveldb_bloom_test",
    "//third_party/leveldatabase:leveldb_cache_test",
    "//third_party/leveldatabase:leveldb_corruption_test",
    "//third_party/leveldatabase:leveldb_crc32c_test",
    "//third_party/leveldatabase:leveldb_db_bench",
    "//third_party/leveldatabase:leveldb_db_test",
    "//third_party/leveldatabase:leveldb_dbformat_test",
    "//third_party/leveldatabase:leveldb_env_test",
    "//third_party/leveldatabase:leveldb_filename_test",
    "//third_party/leveldatabase:leveldb_filter_block_test",
    "//third_party/leveldatabase:leveldb_log_test",
    "//third_party/leveldatabase:leveldb_skiplist_test",
    "//third_party/leveldatabase:leveldb_table_test",
    "//third_party/leveldatabase:leveldb_version_edit_test",
    "//third_party/leveldatabase:leveldb_write_batch_test",
    "//third_party/pdfium:pdfium_unittests",
    "//third_party/pdfium:pdfium_embeddertests",
    "//tools/battor_agent:battor_agent_unittests",
  ]
  if (!is_mac) {
    _disabled_templates += [
      ":keyboard_unittests",
      ":wm_unittests",
    ]
  }
}

if (is_mac || is_win) {
  _disabled_templates += [
    "//media/gpu:video_encode_accelerator_unittest",
  ]
}

foreach(_target, _disabled_targets) {
  update_target(_target) {
    disabled = true
  }
}

foreach(_target, _disabled_templates) {
  update_template_instance(_target) {
    disabled = true
  }
}
