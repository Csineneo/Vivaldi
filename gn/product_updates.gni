import("//build/config/chrome_build.gni")
import("//build/config/sanitizers/sanitizers.gni")

if (is_multi_dll_chrome) {
  update_target("//chrome:chrome_child") {
    if (is_win) {
      output_name = "vivaldi_child"
    }
  }
}

if (!is_android && !is_mac) {
  update_target("//chrome:chrome_initial") {
    if (is_win) {
      output_name = "initialexe/vivaldi"
    } else {
      output_name = "vivaldi"
    }
  }
}

if (is_win) {
  update_target("//chrome/chrome_watcher:chrome_watcher") {
    output_name = "vivaldi_watcher"
  }

  update_target("//chrome:main_dll") {
    if (is_win) {
      output_name = "vivaldi"
    }
  }

  update_target("//chrome:reorder_imports") {
    inputs = []
    outputs = []
    inputs = [
      "$root_out_dir/initialexe/vivaldi.exe",
    ]
    outputs = [
      "$root_out_dir/vivaldi.exe",
      "$root_out_dir/vivaldi.exe.pdb",
    ]
  }

  update_target("//chrome_elf:chrome_elf") {
    output_name = "vivaldi_elf"
  }

  update_template_instance(
      "//chrome/app/version_assembly:version_assembly_manifest") {
    output = "$root_build_dir/$vivaldi_version_full.manifest"
  }

  _platform_suffix = ""
  if (target_cpu == "x64") {
    _platform_suffix = ".x64"
  }

  update_target(
      "//chrome/installer/mini_installer:mini_installer_archive") {
    inputs -= [
      "$root_out_dir/chrome.dll",
      "$root_out_dir/chrome.exe",
      "$root_out_dir/v8_context_snapshot.bin",
    ]
    inputs += [
      "$root_out_dir/vivaldi.dll",
      "$root_out_dir/vivaldi.exe",
      "$root_out_dir/update_notifier.exe",
    ]
    deps+= [
      "//vivaldi/update_notifier",
    ]
    sign_executables =
        defined(invoker.sign_executables) && invoker.sign_executables
    outputs -= [ "$output_dir/chrome.7z" ]
    if (!is_component_build) {
      outputs -= [ "$output_dir/chrome.packed.7z" ]
    }

    # Have to keep the sequence due to the archive.d file being keyed to the first name
    temp = outputs
    outputs = []
    outputs += [ "$output_dir/vivaldi.7z" ]
    if (!is_component_build) {
      outputs += [ "$output_dir/vivaldi.packed.7z" ]
    }
    outputs += temp
    args -= [ "--distribution=_google_chrome" ]
    args += [
      "--distribution=vivaldi",
      "--vivaldi-version",
      rebase_path("//vivaldi/VIVALDI_VERSION", root_build_dir),
      "--vivaldi-build-version",
      "$GLOBAL_BUILDNUM",
    ]
    if (sign_executables) {
      args += [ "--sign-executables" ]
    }
  }

  update_target("//chrome/installer/mini_installer:mini_installer") {
    output_name = "Vivaldi.${vivaldi_version_full}${_platform_suffix}"
  }

  if (!(is_component_build && is_debug && target_cpu == "x86")) {
    update_target(
        "//chrome/installer/mini_installer:next_version_mini_installer") {
      disabled = true
      deps = []
      inputs = []
    }
  }
  if (is_multi_dll_chrome && is_syzyasan) {
    update_target("//chrome/tools/build/win/syzygy::chrome_dll_syzygy") {
      dll_name = "vivaldi"
      binary_name = "vivaldi.dll"
    }
    update_target(
        "//chrome/tools/build/win/syzygy::chrome_child_dll_syzygy") {
      dll_name = "vivaldi_child"
      binary_name = "vivaldi_child.dll"
    }
    update_target(
        "//chrome/tools/build/win/syzygy::chrome_child_dll_syzygy_copy") {
      source -= ["$root_out_dir/chrome_child.dll"]
      sources += ["$root_out_dir/vivaldi_child.dll"]
    }
  }
}

# Write compiler path to win_toolchain.json file used by PGO benchmark script
if (is_win) {
  import("//build/config/win/visual_studio_version.gni")
  write_file("$root_build_dir/win_toolchain.json",
      "{ \"path\":\""+ rebase_path(visual_studio_path) +"\" }")
}

if (is_android) {
  update_template_instance("//chrome/android:chrome_public_apk") {
    apk_name = "Vivaldi"
  }

  update_template_instance("//chrome/android:chrome_public_apk_resources") {
    resource_dirs = []
    resource_dirs = [ "//vivaldi/android/java/res_vivaldi/final" ]
  }
}

if (!is_android) {
  update_template_instance("//chrome/app/vector_icons:chrome_vector_icons") {
    icons -= ["${branding_path_component}/product.icon"]
    icons += ["//vivaldi/app/resources/vector_icons/product.icon"]
  }
}