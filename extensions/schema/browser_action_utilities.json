// Copyright 2015 Vivaldi Technologies AS. All rights reserved.

[
  {
    "namespace": "extensionActionUtils",
    "description": "Helper functions for Vivaldi to reuse Chromes extension UI.",
    "types": [
      {
        "id": "ActionType",
        "type": "string",
        "enum": ["browser", "page"],
        "description": "browser- or pageAction."
      },
      {
        "id": "ExtensionType",
        "type": "string",
        "enum": ["extensionAction", "componentAction"],
        "description": "Regular extension- or componentAction. Component actions will go through ToolbarActionViewController"
      },
      {
        "id": "ExtensionInfo",
        "type": "object",
        "description": "Extension action per tab id.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique extension identifier."
          },
          "badgeTooltip": {
            "type": "string",
            "optional": true,
            "description": "Tooltip for the button."
          },
          "badgeText": {
            "type": "string",
            "optional": true,
            "description": "Badgetext, typically room for four chars."
          },
          "badgeIcon": {
            "type": "string",
            "optional": true,
            "description": "data-url for the current icon."
          },
          "popupUrl": {
            "type": "string",
            "optional": true,
            "description": "Relative url for the popup document."
          },
          "badgeTextColor": {
            "type": "string",
            "optional": true,
            "description": "Text color for the badge text, currently unused."
          },
          "badgeBackgroundColor": {
            "type": "string",
            "optional": true,
            "description": "Background color for the badge text."
          },
          "actionType": {
            "$ref": "ActionType",
            "optional": true,
            "description": "The type of the extensionAction, either pageaction or browseraction."
          },
          "visible": {
            "type": "boolean",
            "optional": true,
            "description": "Visibility of the action button, defaults to true."
          },
          "actionIsHidden": {
            "type": "boolean",
            "optional": true,
            "description": "Set to true if the action is user-set to hidden. Defaults to false."
          },
          "allowInIncognito": {
            "type": "boolean",
            "optional": true,
            "description": "Whether the action is available in incognito windows or not."
          },
          "extensionType": {
            "$ref": "ExtensionType",
            "optional": true,
            "description": "The type of the extensionAction, either pageaction or browseraction. Defaults to |extensionAction|."
          },
          "name": {
            "type": "string",
            "optional": true,
            "description": "Name of extension."
          },
          "homepage": {
            "type": "string",
            "optional": true,
            "description": "Homepage of extension."
          },
          "optionspage": {
            "type": "string",
            "optional": true,
            "description": "Address of extension options page."
          }
        }
      }
    ],
    "functions": [
      {
        "name": "getToolbarExtensions",
        "type": "function",
        "description": "",
        "parameters": [
          {
            "type": "function",
            "name": "callback",
            "parameters": [
              {
                "name": "results",
                "type": "array",
                "items": { "$ref": "ExtensionInfo" }
              }
            ]
          }
        ]
      },
      {
        "name": "executeExtensionAction",
        "type": "function",
        "description": "execute browserAction or pageAction for extension",
          "parameters": [
            {
              "name": "extensionId",
              "type": "string",
              "description": ""
            },
            {
              "type": "integer",
              "name": "windowId",
              "description": "Window.id of the application window, -2 if we should use current window.",
              "optional": true
            },
            {
              "name": "showPopup",
              "type": "function",
              "description": "Callback for popup actions.",
              "parameters": [
                {
                  "$ref": "ExtensionInfo",
                  "name": "extension"
                }
              ]
            }
          ]
      },
      {
        "name": "toggleBrowserActionVisibility",
        "type": "function",
        "description": "This will toggle the visibility of an extension browser- or page-action button. The regular vivaldi://extensions page will have a 'show' button.",
        "parameters": [
          {
            "name": "extensionId",
            "type": "string",
            "description": "The id for the extension we want to toggle visibility on."
          }
        ]
      },
      {
        "name": "removeExtension",
        "type": "function",
        "description": "Removes a specified extension.",
        "parameters": [
          {
            "name": "extensionId",
            "type": "string",
            "description": "The id for the extension we want to remove."
          },
          {
            "type": "integer",
            "name": "windowId",
            "description": "Window.id of the application window. Used to find the Browser object.",
            "optional": true
          }
        ]
      }
    ],
    "events": [
      {
        "name": "onAdded",
        "type": "function",
        "description": "Fired when an extension has been loaded.",
        "parameters": [
          {
            "$ref": "ExtensionInfo",
            "name": "extension"
          }
        ]
      },
      {
        "name": "onRemoved",
        "type": "function",
        "description": "Fired when an extension has been unloaded.",
        "parameters": [
          {
            "$ref": "ExtensionInfo",
            "name": "extension"
          }
        ]
      },
      {
        "name": "onUpdated",
        "type": "function",
        "description": "Fired when an extensionAction is changed.",
        "parameters": [
          {
            "$ref": "ExtensionInfo",
            "name": "extension"
          },
          {
            "type": "integer",
            "name": "windowId",
            "description": "Window.id of the application window, -2 if we should use current window.",
            "optional": true
          },
          {
            "type": "integer",
            "name": "tabId",
            "description": "Id of active tab.",
            "optional": true
          }
        ]
      },
      {
        "name": "onIconLoaded",
        "type": "function",
        "description": "Fired when an extension-icon is fully loaded. Note that only ExtensionInfo.id and ExtensionInfo.badgeIcon is filled!",
        "parameters": [
          {
            "$ref": "ExtensionInfo",
            "name": "extension"
          }
        ]
      }
    ]
  }
]
